====== ES3.1 Proposal Working Draft ======
See [[ES3.1:ES3.1 Proposal Working Draft]], a proposal to TC39-TG1 on the Maintenance of the ECMAScript, 3rd Edition Specification.

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2007/04/15 01:43//


====== ES3.1 Notes, Working Documents, Etc. ======

See [[ES3.x Working Docs]] for various notes and documents related to maintenance and enhancement of ES 3 


 --- //[[Allen.Wirfs-Brock@microsoft.com|Allen Wirfs-Brock]] 2007/11/06 16:26//


====== March 2007 Proposal and Discussion ======
The following relates to an earlier proposal.  Discussion of it lead to the "ES3.1" concept and the above draft proposal.

 --- //[[Allen.Wirfs-Brock@microsoft.com|Allen Wirfs-Brock]] 2007/04/16 09:18//

----
[[es3.1:obsoleteSpecStuff|Link to initial proposal. It is generally out of date but may contain some useful material]]
--- //[[Allen.Wirfs-Brock@microsoft.com|Allen Wirfs-Brock]] 2008/08/26 21:40//


----
----


In my opinion this page needs a fresh start. Its entire current contents should move to the discussion page (at the top is fine) and a technically phrased proposal for subsetting ES4 to make an "ES3.1", as discussed in [[meetings:minutes_mar_21_2007]], should be made here.

 --- //[[brendan@mozilla.org|Brendan Eich]] 2007/03/22 15:46//

A working draft of a new proposal is almost ready.  Pratap will soon post it.

 --- //[[Allen.Wirfs-Brock@microsoft.com|Allen Wirfs-Brock]] 2007/04/13 13:59//


====== Maintenance of edition 3 ======

(Also see the [[es3.1:discussion|discussion page]] for this proposal).

The following is a proposal to Refocus TC39-TG1 on the Maintenance of the ECMAScript, 3rd Edition Specification
  * {{proposals:proposal_to_refocus_tc39-tg1.rtf}}
  * {{proposals:proposal_to_refocus_tc39-tg1.pdf}}

===== Proposal =====

[I have extracted here the part of this proposal that does not require input from TC39. I recommend the other parts be taken up with that committee.  --- //[[jodyer@adobe.com|Jeff Dyer]] 2007/03/19 08:12//]

In light on the broad adoption of ECMAScript, 3rd Edition for web browser based applications it is clear that this language will remain an important part of the world-wide-web infrastructure for the foreseeable future.  However, since the publication of the ECMAScript, 3rd Edition  specification in 1999 there has been feature drift between implementations and cross-implementation compatibility issues arising from deficiencies and ambiguities in the specification. The purpose of this work item is to create a maintenance revision of the specification (a 4th Edition) that focuses on these goals:

  * Improve implementation conformance by rewriting the specification to improve its rigor and clarity, and by correcting known points of ambiguity or under specification.
  * Add commonly implemented and used extensions to the standard (specifically most JavaScript 1.6 and 1.7 features)
  * Consider proposals for additional incremental extensions that support current usage experience and best practices
  * Consider proposals for minor language changes that correct well known performance or reliability issues

This work item should become the primary focus of TC39-TG1.



===== Comments =====

Our current set of proposed extensions to ES3 are aligned with this proposal. However, limiting our focus to incremental enhancements seems shortsighted in light of the way the web has changed and our experience with the proposed extensions to ES3 (in JScript.NET, ActionScript 3, and JavaScript 1.7, to name a few). 

 --- //[[jodyer@adobe.com|Jeff Dyer]] 2007/03/19 08:40//


I'm going to have to agree with Jeff, and would like to further object to the idea of creating a new language.  Getting ES to run decently on limited-memory devices has always been a challenge.  Trying to add //another// language is just not possible:  there simply isn't room.  (Not that it would matter, because I don't think this second language would go anywhere.)

 --- //[[chrispi@opera.com|Chris Pine]] 2007/03/20 05:56//


I'm sure that Chris meant "a new **incompatible** language". Which is a point I've made repeatedly in response to arguments against backward compatibility. The learning and switching costs for developers, the code migration cost becoming a rewrite tax, and the unbearable costs to implementors such as Opera (and Mozilla -- we can't justify putting C-Python into Firefox, never mind a bigger incompatible language). ES4 has been designed with able and active representation from Opera all along, to fit on small devices and process ES3 ("Web JavaScript") content with full backward compatibility at the cost of a few version checks.

 --- //[[brendan@mozilla.org|Brendan Eich]] 2007/03/20 17:20//