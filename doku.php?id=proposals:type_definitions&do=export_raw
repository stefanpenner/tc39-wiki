====== Type definitions ======

This node is here to have a place to pin down the form and meaning of the definition of a named structural type.

===== Syntax =====

Type names are introduced using the following syntax:

<code ebnf>
    typedef ::= attr? "type" CL[ ident "=" typeexpr ]

    attr ::= Ident | public | private | protected | internal
</code>

where ''typeexpr'' is defined in [[syntax for type expressions]] and ''CL'' is the commalist operator defined along with ''typeexpr''.

Type definitions can occur at the top level of programs and packages; but not at the top level of a class; at the top level of a function body; or in block statements that do not dominate the end of the program. (See [[proposals:strict and standard modes]] for rationale)

===== References =====

A type name ''T'' can be referenced unqualifiedly as ''T'', explicitly from a package ''a.b'' as ''a.b.T'',  and explicitly from a class ''C'' as ''C.T'' or ''C.ns::T'' where ''ns'' is the namespace in which T is defined.

===== Semantics =====

The meaning of a type name ''T'' is always the expanded definition of ''T''.  (If we allow recursive types this will presumably be some sort of least fixed point of the expansion.)

----