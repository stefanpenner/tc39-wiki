Two new global objects are added: ''ES3_1'' and ''SES''. 
(The names ''ES3_1'' and ''SES'' will surely be changed.) These objects will have ''eval'' methods.

''ES3_1.eval(''//source//'','' //context//'')''\\
''SES.eval(''//source//'','' //context//'')''


The string is compiled is compiled as an expression and executed in its own environment, completely isolated from the current environment except that an optional context object can be supplied which provides global variable names and their values. The value of the expression is returned as the value of ''eval''.

The existence of the ''ES3_1'' object is an indication to script that ''ES3_1'' functionality is available. Its ''eval'' method assures that ''this'' in a function cannot be accidentally bound to the global object.

''SES.eval'' employs a safe subset of the ES3_1 grammar, similar to ADsafe and Cajita. It allows for safer delayed loading of guest code.

Relevant Goal: [[es3.1:es3.1_goals|4]]\\
Relevant Design Principle: [[es3.1:design_principles|2a, 2b]]\\
Relevant ES4 proposal: none\\

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2007/04/15 02:17//

I assume that after all the recent discussions and investigations into JavaScript capability leaks, that this proposal in the current form has basically been demonstrated to be of no value. There are too many capability leakages in this form. A secure eval really needs to evaluate to a secure ES dialect or evaluate to a shared-nothing vat with a messaging interface to be reasonably safe. None of these currently subset ES4, and therefore this violates the design goals. Can we remove this proposal for now, while we focus security efforts on the development/evangelization of Secure EcmaScript?
 --- //[[kzyp@dojotoolkit.org|Kris Zyp]]//
----
Agreed. After offline discussion on the es3.x-discuss list, this proposal stands withdrawn.
 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2008/05/08 14:30//