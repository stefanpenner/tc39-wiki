<?xml version="1.0" encoding="utf-8"?>
<!-- generator="FeedCreator 1.7.1" -->
<?xml-stylesheet href="http://wiki.ecmascript.org/lib/styles/feed.css" type="text/css"?>
<rdf:RDF
    xmlns="http://purl.org/rss/1.0/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel rdf:about="http://wiki.ecmascript.org/feed.php">
        <title>ES Wiki proposals</title>
        <description></description>
        <link>http://wiki.ecmascript.org/</link>
        <image rdf:resource="http://wiki.ecmascript.org/lib/images/favicon.ico" />
       <dc:date>2015-09-10T21:20:47+01:00</dc:date>
        <items>
            <rdf:Seq>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:abstract_machine&amp;amp;rev=1161363270"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:argument_this&amp;amp;rev=1179525488"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:arrays&amp;amp;rev=1190840046"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:block_expressions&amp;amp;rev=1193189712"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:bound_this&amp;amp;rev=1190913117"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:bug_fixes&amp;amp;rev=1182468040"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:built-in_objects&amp;amp;rev=1161362948"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:builtin_classes&amp;amp;rev=1216060142"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:bytearray&amp;amp;rev=1169750359"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:catchalls&amp;amp;rev=1216060660"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:contracts&amp;amp;rev=1149275115"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:date_and_time&amp;amp;rev=1216060963"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:date_literal_syntax&amp;amp;rev=1156765246"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:debug_helpers&amp;amp;rev=1142538110"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:decimal&amp;amp;rev=1216060750"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:descriptive_prose&amp;amp;rev=1161363372"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:destructuring_assignment&amp;amp;rev=1216060685"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:dictionary&amp;amp;rev=1189536247"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:discussion_about_contracts&amp;amp;rev=1141195887"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:documentation&amp;amp;rev=1173639565"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:drop_interfaces&amp;amp;rev=1149226056"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:enumerability&amp;amp;rev=1216060338"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:enumeration_type&amp;amp;rev=1174804371"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:expression_closures&amp;amp;rev=1174871248"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:extend_regexps&amp;amp;rev=1216061006"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:filesystem&amp;amp;rev=1140119775"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:generic_functions&amp;amp;rev=1187117998"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:getters_and_setters&amp;amp;rev=1216060634"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:globals&amp;amp;rev=1216060863"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:grammar&amp;amp;rev=1162407971"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:group_assignment&amp;amp;rev=1142018466"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:hashcodes&amp;amp;rev=1441811250"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:inactive&amp;amp;rev=1191043483"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:intrinsic_namespace&amp;amp;rev=1216060306"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:is_as_to&amp;amp;rev=1216060191"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators&amp;amp;rev=1213214399"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:json_encoding_and_decoding&amp;amp;rev=1190854455"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:limit_syntax_of_lvalues&amp;amp;rev=1148684318"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:line_terminator_normalization&amp;amp;rev=1180091158"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:local_packages&amp;amp;rev=1216060513"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:macros&amp;amp;rev=1139032846"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:maintenance_of_es3&amp;amp;rev=1191470535"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:meta_objects&amp;amp;rev=1216060940"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:modules&amp;amp;rev=1209920537"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:name_objects&amp;amp;rev=1190845319"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:namespace_shadowing&amp;amp;rev=1216060531"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:normative_grammar&amp;amp;rev=1212186499"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:nullability&amp;amp;rev=1216060215"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:numbers&amp;amp;rev=1216059798"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:octal_numbers&amp;amp;rev=1181649407"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:oopkoolaid&amp;amp;rev=1189536193"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:operators&amp;amp;rev=1242408798"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:program_configuration&amp;amp;rev=1182447943"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:program_units&amp;amp;rev=1196707349"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:proper_tail_calls&amp;amp;rev=1255872669"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:proposals&amp;amp;rev=1191043456"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:quoting&amp;amp;rev=1147205786"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:reformed_with&amp;amp;rev=1216060726"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:remove_the_arguments_object&amp;amp;rev=1182456393"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:reserved_words&amp;amp;rev=1216060822"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:resurrected_eval&amp;amp;rev=1189540991"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:security_wrappers&amp;amp;rev=1159308364"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:self_type&amp;amp;rev=1189196221"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:semantics&amp;amp;rev=1173795523"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:slice_syntax&amp;amp;rev=1197335132"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:stack_inspection&amp;amp;rev=1168978015"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:static_generics&amp;amp;rev=1169746610"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:strict_and_standard_modes&amp;amp;rev=1216060273"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:string.prototype.trim&amp;amp;rev=1161367491"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:string_hashcodes&amp;amp;rev=1180428280"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:structural_types_and_typing_of_initializers&amp;amp;rev=1216060169"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:switch_class&amp;amp;rev=1216060361"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:syntactic_semantics&amp;amp;rev=1162440667"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_function_types&amp;amp;rev=1145903144"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_pragmas&amp;amp;rev=1216060801"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_type_expressions&amp;amp;rev=1216061117"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:triple_quotes&amp;amp;rev=1216060885"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:type_definitions&amp;amp;rev=1216060462"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:type_inference&amp;amp;rev=1149275251"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:type_parameters&amp;amp;rev=1216060112"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:type_refinements&amp;amp;rev=1149231168"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:type_system&amp;amp;rev=1161370899"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:typeof&amp;amp;rev=1216060776"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:update_unicode&amp;amp;rev=1216059840"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:user_package_distribution&amp;amp;rev=1149275595"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:vector&amp;amp;rev=1186000054"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:versioning&amp;amp;rev=1206845170"/>
                <rdf:li rdf:resource="http://wiki.ecmascript.org/doku.php?id=proposals:with-bound_variables&amp;amp;rev=1149049315"/>
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://wiki.ecmascript.org/lib/images/favicon.ico">
        <title>ES Wiki</title>
        <link>http://wiki.ecmascript.org/</link>
        <url>http://wiki.ecmascript.org/lib/images/favicon.ico</url>
    </image>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:abstract_machine&amp;amp;rev=1161363270">
        <dc:format>text/html</dc:format>
        <dc:date>2006-10-20T16:54:30+01:00</dc:date>
        <title>proposals:abstract_machine</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:abstract_machine&amp;amp;rev=1161363270</link>
        <description> Renamed to reference evaluator.   ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:argument_this&amp;amp;rev=1179525488">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-18T21:58:08+01:00</dc:date>
        <title>proposals:argument_this</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:argument_this&amp;amp;rev=1179525488</link>
        <description> (See also the discussion page.)  Proposal for &amp;quot;Argument This&amp;quot;   For class methods, we really have two design options:  &amp;ldquo;Bound-this&amp;rdquo;: The class method closes over this, and always ignores its first argument (this is the current ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:arrays&amp;amp;rev=1190840046">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-26T20:54:06+01:00</dc:date>
        <title>proposals:arrays</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:arrays&amp;amp;rev=1190840046</link>
        <description> Status: complete draft (rev 2).  Also see the discussion page for this proposal.  Note, this proposal is somewhat outdated, it is superseded by approved proposal tickets that handle various aspects of it. We&amp;rsquo;ve approved type syntax like [t] fo...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:block_expressions&amp;amp;rev=1193189712">
        <dc:format>text/html</dc:format>
        <dc:date>2007-10-24T01:35:12+01:00</dc:date>
        <title>proposals:block_expressions</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:block_expressions&amp;amp;rev=1193189712</link>
        <description> Tickets: #240, #243, #253.  (Also see the discussion page for this proposal)  This proposal introduces a keyword let that provides local scoping constructs for variables, constants, and functions.  The rationale for the proposal is that tighter scop...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:bound_this&amp;amp;rev=1190913117">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-27T17:11:57+01:00</dc:date>
        <title>proposals:bound_this</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:bound_this&amp;amp;rev=1190913117</link>
        <description> Class methods have &amp;ldquo;bound this&amp;rdquo;, where this in the method body is always bound to the class instance from which the method was extracted, regardless of what this parameter is actually passed in to the method (the this parameter to the me...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:bug_fixes&amp;amp;rev=1182468040">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-21T23:20:40+01:00</dc:date>
        <title>proposals:bug_fixes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:bug_fixes&amp;amp;rev=1182468040</link>
        <description> Over the last year, we have discussed and reached informal agreement to fix what seem like bugs in Editions 1-3 of ECMA-262.   Small fixes  [ARGUMENTS.SHOULD.BE.ARRAY] arguments should be an object that delegates to Array.prototype. See http://bugs....</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:built-in_objects&amp;amp;rev=1161362948">
        <dc:format>text/html</dc:format>
        <dc:date>2006-10-20T16:49:08+01:00</dc:date>
        <title>proposals:built-in_objects</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:built-in_objects&amp;amp;rev=1161362948</link>
        <description> Built-in notation  We will use ES4 to describe the built-in objects  We will use a well defined escape clause for calling into the native (ML) implementation    ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:builtin_classes&amp;amp;rev=1216060142">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:29:02+01:00</dc:date>
        <title>proposals:builtin_classes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:builtin_classes&amp;amp;rev=1216060142</link>
        <description> This is a simple brute force attempt to write the ECMA-262 builtin classes using the new language.  (The contents of this page has mostly been superseded by what&amp;rsquo;s now in the reference implementation repository.)  (Also see the discussion page...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:bytearray&amp;amp;rev=1169750359">
        <dc:format>text/html</dc:format>
        <dc:date>2007-01-25T18:39:19+01:00</dc:date>
        <title>proposals:bytearray</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:bytearray&amp;amp;rev=1169750359</link>
        <description> (Also see the discussion page for this proposal)   Overview  In previous versions of ECMAScript, there wasn&amp;rsquo;t a good way to efficiently represent a packed array of arbitrary bytes. The predefined core object Array is inefficient for this purpo...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:catchalls&amp;amp;rev=1216060660">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:37:40+01:00</dc:date>
        <title>proposals:catchalls</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:catchalls&amp;amp;rev=1216060660</link>
        <description> Ticket #214 and Ticket #196 discuss open issues in the semantics and the method suite.  (Also see the discussion page for this proposal)  This proposal is to standardize the following method types   meta function has(ident), the catchall has-propert...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:contracts&amp;amp;rev=1149275115">
        <dc:format>text/html</dc:format>
        <dc:date>2006-06-02T19:05:15+01:00</dc:date>
        <title>proposals:contracts</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:contracts&amp;amp;rev=1149275115</link>
        <description> This proposal has been deferred. For now, type refinements is a less ambitious proposal that could ultimately lead to the development of a more sophisticated, post-ES4 contract system.  Motivation   Types are a great tool for programmers to specify ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:date_and_time&amp;amp;rev=1216060963">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:42:43+01:00</dc:date>
        <title>proposals:date_and_time</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:date_and_time&amp;amp;rev=1216060963</link>
        <description> (Also see the the discussion page for this proposal)  Note that all new properties and methods below are to be added to the builtin dynamic class Date, not to Date.prototype. Future code should be able to early-bind accesses to the new properties an...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:date_literal_syntax&amp;amp;rev=1156765246">
        <dc:format>text/html</dc:format>
        <dc:date>2006-08-28T11:40:46+01:00</dc:date>
        <title>proposals:date_literal_syntax</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:date_literal_syntax&amp;amp;rev=1156765246</link>
        <description> Spec retracted 2006-08-28 following meeting on 2006-08-23; proposals for supporting a sensible date syntax have been folded into proposals:date_and_time.  Spec location: Chapter 19 Native Objects: Date objects  (Also see the discussion page for this...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:debug_helpers&amp;amp;rev=1142538110">
        <dc:format>text/html</dc:format>
        <dc:date>2006-03-16T19:41:50+01:00</dc:date>
        <title>proposals:debug_helpers</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:debug_helpers&amp;amp;rev=1142538110</link>
        <description> The more I consider this proposal, the more I think it &amp;ldquo;foundational&amp;rdquo;. I believe that the provision of appropriate &amp;ldquo;diagnostic primitives&amp;rdquo; permits moving many proposed dynamic checking aspects of the language into library cod...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:decimal&amp;amp;rev=1216060750">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:39:10+01:00</dc:date>
        <title>proposals:decimal</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:decimal&amp;amp;rev=1216060750</link>
        <description> (See also the discussion page for this proposal)  (See also the numbers proposal, which ties together the various number representations and their interactions.)   A new non-normalizing decimal type, corresponding to the 128-bit decimal type describ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:descriptive_prose&amp;amp;rev=1161363372">
        <dc:format>text/html</dc:format>
        <dc:date>2006-10-20T16:56:12+01:00</dc:date>
        <title>proposals:descriptive_prose</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:descriptive_prose&amp;amp;rev=1161363372</link>
        <description> Prose notation  High level commentary of the ML description  We will edit the prose in the wiki and interleave code via links  We will have style guidelines for the prose    ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:destructuring_assignment&amp;amp;rev=1216060685">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:38:05+01:00</dc:date>
        <title>proposals:destructuring_assignment</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:destructuring_assignment&amp;amp;rev=1216060685</link>
        <description> (Also see the discussion page for this proposal)   Summary   Allow for destructuring of array and object data using a syntax that mirrors the construction of array and object literals. The destructuring can appear in assignment statements but also i...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:dictionary&amp;amp;rev=1189536247">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-11T18:44:07+01:00</dc:date>
        <title>proposals:dictionary</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:dictionary&amp;amp;rev=1189536247</link>
        <description> Also see the discussion page for this proposal.  The class is now called Map by agreement between Brendan and myself after a protracted discussion on es4-discuss where a thousand opinions bloomed, none of them alike.  &amp;mdash; Lars T Hansen 2007/07/3...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:discussion_about_contracts&amp;amp;rev=1141195887">
        <dc:format>text/html</dc:format>
        <dc:date>2006-03-01T06:51:27+01:00</dc:date>
        <title>proposals:discussion_about_contracts</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:discussion_about_contracts&amp;amp;rev=1141195887</link>
        <description> A function signature with contract refinements to types:  function[this:String,Integer@isNatural]:Boolean  Note that this must be type-constrained here.  Static analysis can erase the contract parts. The @ syntax makes that easy for readers and pars...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:documentation&amp;amp;rev=1173639565">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-11T18:59:25+01:00</dc:date>
        <title>proposals:documentation</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:documentation&amp;amp;rev=1173639565</link>
        <description> DO NOT EXPORT  Motivation   It would be useful to make JavaScript programs more self-documenting.   Proposal   It is proposed that optional strings can be inserted in function definitions and in var definitions. These are ignored by the compiler, bu...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:drop_interfaces&amp;amp;rev=1149226056">
        <dc:format>text/html</dc:format>
        <dc:date>2006-06-02T05:27:36+01:00</dc:date>
        <title>proposals:drop_interfaces</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:drop_interfaces&amp;amp;rev=1149226056</link>
        <description> This is a simple proposal: remove interfaces from the spec. They make the language larger, and may not add as much expressive power as they cost. Some of the mechanisms provided by interfaces, such as comparable, can be provided more safely by type ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:enumerability&amp;amp;rev=1216060338">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:32:18+01:00</dc:date>
        <title>proposals:enumerability</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:enumerability&amp;amp;rev=1216060338</link>
        <description> (Also see the discussion page for this proposal)  All that is needed is a way to set the magic internal DontEnum bit. Extend Object.prototype.propertyIsEnumerable() so you can query, set, or clear the internal DontEnum bit. The E parmeter has positi...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:enumeration_type&amp;amp;rev=1174804371">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-25T06:32:51+01:00</dc:date>
        <title>proposals:enumeration_type</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:enumeration_type&amp;amp;rev=1174804371</link>
        <description> An enumeration type defines a type name for a related group of symbolic constants. Enumerations are used for &amp;ldquo;multiple choice&amp;rdquo; scenarios, in which a runtime decision is made from a fixed number of choices that are known at compile-time. ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:expression_closures&amp;amp;rev=1174871248">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-26T01:07:28+01:00</dc:date>
        <title>proposals:expression_closures</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:expression_closures&amp;amp;rev=1174871248</link>
        <description> (Also see the discussion page page for this proposal.)  Rationale   Having a syntax for closures that have expression bodies could solve several problems:  allows refactoring of code into closures without changing the meaning, where return makes thi...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:extend_regexps&amp;amp;rev=1216061006">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:43:26+01:00</dc:date>
        <title>proposals:extend_regexps</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:extend_regexps&amp;amp;rev=1216061006</link>
        <description> Also see the discussion page for this proposal.  A small group of proposals to make regular expressions easier to use.   Extending RegExps for Unicode Ranges   RegExps should be extended to take better advantage of full Unicode ranges. The Unicode C...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:filesystem&amp;amp;rev=1140119775">
        <dc:format>text/html</dc:format>
        <dc:date>2006-02-16T19:56:15+01:00</dc:date>
        <title>proposals:filesystem</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:filesystem&amp;amp;rev=1140119775</link>
        <description> Adobe ExtendScript offers platform independent filesystem objects. The implementation may be worth looking at - it may serve as the basis for a generic implementation:   adobefilefolder.pdf  Currently, the File and Folder objects are defined and imp...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:generic_functions&amp;amp;rev=1187117998">
        <dc:format>text/html</dc:format>
        <dc:date>2007-08-14T18:59:58+01:00</dc:date>
        <title>proposals:generic_functions</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:generic_functions&amp;amp;rev=1187117998</link>
        <description> 2007-08-13 / lhansen@adobe.com / rev 3  Also see the discussion page for this proposal.   Motivation   Our current operator overloading proposal is very weak. We ought to have something with proper type dispatch. Instead of putting something ad-hoc ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:getters_and_setters&amp;amp;rev=1216060634">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:37:14+01:00</dc:date>
        <title>proposals:getters_and_setters</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:getters_and_setters&amp;amp;rev=1216060634</link>
        <description> (Also see the catchalls proposal, the intrinsic::get and intrinsic::set methods specifically.)  This proposal is to standardize the following method initialisers as valid alternatives to property initialisers within an object initialiser:   get name...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:globals&amp;amp;rev=1216060863">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:41:03+01:00</dc:date>
        <title>proposals:globals</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:globals&amp;amp;rev=1216060863</link>
        <description> It was proposed at the Oslo f2f in July that we should provide a way of naming the global object.   Spec   The expression    intrinsic::global   evaluates to a reference to the global object in effect for the calling code.  The result of this progra...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:grammar&amp;amp;rev=1162407971">
        <dc:format>text/html</dc:format>
        <dc:date>2006-11-01T19:06:11+01:00</dc:date>
        <title>proposals:grammar</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:grammar&amp;amp;rev=1162407971</link>
        <description> (Also see the discussion page for this proposal)  The normative grammar should be written using the notation described here: JS2.0 Grammar Notation.   The language the normative grammar describes should be LR(1), but not necessarily LL(k)  The gramm...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:group_assignment&amp;amp;rev=1142018466">
        <dc:format>text/html</dc:format>
        <dc:date>2006-03-10T19:21:06+01:00</dc:date>
        <title>proposals:group_assignment</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:group_assignment&amp;amp;rev=1142018466</link>
        <description> When the return value is not enough, you have to mutate an object passed in by reference to return &amp;ldquo;out&amp;rdquo; parameters. This requires a new object allocation per call, if not per &amp;ldquo;out&amp;rdquo; parameter, in generalized bindings of ES an...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:hashcodes&amp;amp;rev=1441811250">
        <dc:format>text/html</dc:format>
        <dc:date>2015-09-09T15:07:30+01:00</dc:date>
        <title>proposals:hashcodes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:hashcodes&amp;amp;rev=1441811250</link>
        <description> (Also see the discussion page for this proposal)   Open tickets  Ticket #52: What is the interaction of intrinsic::hashcode with the overloaded === operator?   Proposal   A global, non-deletable, non-alterable function intrinsic::hashcode(o:*):uint ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:inactive&amp;amp;rev=1191043483">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-29T05:24:43+01:00</dc:date>
        <title>proposals:inactive</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:inactive&amp;amp;rev=1191043483</link>
        <description> These are proposals we&amp;rsquo;re not addressing any further.  Standard library issues   containers, some standard container types (hashtables, red-black trees or skip-lists, sets, queues).  status: desires hashcodes, type parameters; otherwise can be...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:intrinsic_namespace&amp;amp;rev=1216060306">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:31:46+01:00</dc:date>
        <title>proposals:intrinsic_namespace</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:intrinsic_namespace&amp;amp;rev=1216060306</link>
        <description> (Also see the discussion page for this proposal)  For builtin classes/which prototype, catchalls, hashcodes, operators, and probably other places, we would like an intrinsic namespace that can be used to access a built-in or default function or oper...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:is_as_to&amp;amp;rev=1216060191">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:29:51+01:00</dc:date>
        <title>proposals:is_as_to</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:is_as_to&amp;amp;rev=1216060191</link>
        <description> (Also see the discussion page for this proposal)   Tickets: #244 -- 'like' as an operator  Proposed change   The proposal is to adjust the meaning of two of the is and to operators, replace the as operator with a cast operator, and adopt a single sy...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators&amp;amp;rev=1213214399">
        <dc:format>text/html</dc:format>
        <dc:date>2008-06-11T19:59:59+01:00</dc:date>
        <title>proposals:iterators_and_generators</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators&amp;amp;rev=1213214399</link>
        <description> (Also see the discussion page.)  Iterators and Generators   This proposal extends the for-in loop in ES1-3 and the for-each-in loop from E4X (ECMA-357) by imitating Python&amp;rsquo;s iteration protocol. It builds on this protocol with support for gener...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:json_encoding_and_decoding&amp;amp;rev=1190854455">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-27T00:54:15+01:00</dc:date>
        <title>proposals:json_encoding_and_decoding</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:json_encoding_and_decoding&amp;amp;rev=1190854455</link>
        <description> The following built-in functions facilitate handling JSON data, as specified in Douglas Crockford's RFC 4627.  Ticket #212 proposes that we remove JSON support from ES4.   Encoding  Object.prototype.toJSONString( [pretty] )   Returns a String contai...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:limit_syntax_of_lvalues&amp;amp;rev=1148684318">
        <dc:format>text/html</dc:format>
        <dc:date>2006-05-26T22:58:38+01:00</dc:date>
        <title>proposals:limit_syntax_of_lvalues</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:limit_syntax_of_lvalues&amp;amp;rev=1148684318</link>
        <description> Need proposal from Jeff    ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:line_terminator_normalization&amp;amp;rev=1180091158">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-25T11:05:58+01:00</dc:date>
        <title>proposals:line_terminator_normalization</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:line_terminator_normalization&amp;amp;rev=1180091158</link>
        <description> When using multiline string literals (either with triple-quotes or with backslash-newline), CRLF should only contribute one character to the string (so strlen works the same on all platforms, for example). Also, backslash-CRLF needs to do the right ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:local_packages&amp;amp;rev=1216060513">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:35:13+01:00</dc:date>
        <title>proposals:local_packages</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:local_packages&amp;amp;rev=1216060513</link>
        <description> (Also see discussion:local packages.)   Abstract   A mechanism is proposed that allows packages to be declared local to a program fragment (typically a single file).   Background and rationale   In dynamic environments (notably web browsers) multipl...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:macros&amp;amp;rev=1139032846">
        <dc:format>text/html</dc:format>
        <dc:date>2006-02-04T06:00:46+01:00</dc:date>
        <title>proposals:macros</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:macros&amp;amp;rev=1139032846</link>
        <description> We could add a macro-expansion phase to the execution model. I believe the correct place to put them is after the initial parse and execution of package-import pragmas (to permit packaged macros).   There is a ton of work on macro systems. My prefer...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:maintenance_of_es3&amp;amp;rev=1191470535">
        <dc:format>text/html</dc:format>
        <dc:date>2007-10-04T04:02:15+01:00</dc:date>
        <title>proposals:maintenance_of_es3</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:maintenance_of_es3&amp;amp;rev=1191470535</link>
        <description> Moved to es3.1:es3.1  ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:meta_objects&amp;amp;rev=1216060940">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:42:20+01:00</dc:date>
        <title>proposals:meta_objects</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:meta_objects&amp;amp;rev=1216060940</link>
        <description> See also the discussion page.  This proposal is to amend the spec with a normative set of meta-objects which must be present in any program and accessible at runtime. The meta-objects may be immutable, and they may be constructed lazily, but in all ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:modules&amp;amp;rev=1209920537">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-04T17:02:17+01:00</dc:date>
        <title>proposals:modules</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:modules&amp;amp;rev=1209920537</link>
        <description> This page is my preliminary thoughts about modules. Please don&amp;rsquo;t pay it much attention.  &amp;mdash; Dave Herman 2008/04/30 03:05   Syntax   New contextual keywords   module, require, provide, as   Declaration syntax   Modules can only be declared...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:name_objects&amp;amp;rev=1190845319">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-26T22:21:59+01:00</dc:date>
        <title>proposals:name_objects</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:name_objects&amp;amp;rev=1190845319</link>
        <description> (Also see the discussion page.)   Problem Statement   The for-in loop combined with namespace-qualified names means we need a Name class reflecting namespace-qualified identifiers of enumerable properties: let o = &amp;#123;x:1, 2:&quot;two&quot;, '@funny':3&amp;#125...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:namespace_shadowing&amp;amp;rev=1216060531">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:35:31+01:00</dc:date>
        <title>proposals:namespace_shadowing</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:namespace_shadowing&amp;amp;rev=1216060531</link>
        <description> A namespace opened in an inner scope is preferred over a namespace opened in an outer scope when resolving ambiguous references.  Here is a simple use case, namespace debug namespace release debug function trace&amp;#40;s&amp;#41; &amp;#123; /* print s */ &amp;#125...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:normative_grammar&amp;amp;rev=1212186499">
        <dc:format>text/html</dc:format>
        <dc:date>2008-05-30T22:28:19+01:00</dc:date>
        <title>proposals:normative_grammar</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:normative_grammar&amp;amp;rev=1212186499</link>
        <description> PDF download XLS download   Revision History   [Note: production numbers in parens indicate locations relative to the previous draft]   30-May-2008: Make TypeParametersList left recursive (404); Change omega parameter in DoWhileSatement from abbrev ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:nullability&amp;amp;rev=1216060215">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:30:15+01:00</dc:date>
        <title>proposals:nullability</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:nullability&amp;amp;rev=1216060215</link>
        <description> (Also see the discussion page for this proposal.)  Motivation   To prevent the dreaded NullPointerException!  As many have pointed out, types in languages like Java that always allow the null value are really a sort of option type.  We would like to...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:numbers&amp;amp;rev=1216059798">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:23:18+01:00</dc:date>
        <title>proposals:numbers</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:numbers&amp;amp;rev=1216059798</link>
        <description> (Also see the discussion page for this proposal)   Motivation   ECMAScript 3rd Edition had only numeric type, called Number, with a concrete representation as IEEE double precision binary floating point. The 4th Edition draft adds types int, uint. T...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:octal_numbers&amp;amp;rev=1181649407">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-12T11:56:47+01:00</dc:date>
        <title>proposals:octal_numbers</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:octal_numbers&amp;amp;rev=1181649407</link>
        <description> (The committee agreed offhandedly to support the syntax for octal numbers in various contexts. This page aims to collect the details.)  Proposal retracted in favor of keeping octal relegated to a non-normative appendix, which we will clean up (http:...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:oopkoolaid&amp;amp;rev=1189536193">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-11T18:43:13+01:00</dc:date>
        <title>proposals:oopkoolaid</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:oopkoolaid&amp;amp;rev=1189536193</link>
        <description> Also see the discussion page for this proposal.  This is a proposal that builds on Map to provide a hashtable that holds associations whose keys are objects with hashcode and equals methods. It&amp;rsquo;s separate because we don&amp;rsquo;t know if it adds...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:operators&amp;amp;rev=1242408798">
        <dc:format>text/html</dc:format>
        <dc:date>2009-05-15T17:33:18+01:00</dc:date>
        <title>proposals:operators</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:operators&amp;amp;rev=1242408798</link>
        <description> NOTE: this proposal is superseded by generic functions. It is no longer linked from proposals.  (Also see the discussion page for this proposal)  The proposal is based on Waldemar Horwat's proposal. Argument type based function dispatch has not been...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:program_configuration&amp;amp;rev=1182447943">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-21T17:45:43+01:00</dc:date>
        <title>proposals:program_configuration</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:program_configuration&amp;amp;rev=1182447943</link>
        <description> This is a proposal to add a facility for program configuration to the language. If it is too late for edition 4, then we should at least try to agree on the design and defer it to edition 5. ActionScript will likely support such a feature in the ES4...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:program_units&amp;amp;rev=1196707349">
        <dc:format>text/html</dc:format>
        <dc:date>2007-12-03T18:42:29+01:00</dc:date>
        <title>proposals:program_units</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:program_units&amp;amp;rev=1196707349</link>
        <description> A proposed pragma for managing compilation units.   Design Goals &amp;amp; Constraints  Provide standard way of declaring dependencies between compilation units, to encourage a library ecosystem.  Provide standard way of &amp;ldquo;loading a file once&amp;rdquo...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:proper_tail_calls&amp;amp;rev=1255872669">
        <dc:format>text/html</dc:format>
        <dc:date>2009-10-18T13:31:09+01:00</dc:date>
        <title>proposals:proper_tail_calls</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:proper_tail_calls&amp;amp;rev=1255872669</link>
        <description> (Also see the discussion page for this proposal)  Also see Ticket #215.   Motivation   Proper tail calls allow programmers to write recursive or mutually recursive functions to implement iterative control behavior. This is useful for many data struc...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:proposals&amp;amp;rev=1191043456">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-29T05:24:16+01:00</dc:date>
        <title>proposals:proposals</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:proposals&amp;amp;rev=1191043456</link>
        <description> This subdirectory is to contain discussion of proposed changes until they are agreed-upon. Once agreed-upon, the body of the proposal can be incorporated into the spec document.   Proposals that are accepted are marked with a leading .  Proposals th...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:quoting&amp;amp;rev=1147205786">
        <dc:format>text/html</dc:format>
        <dc:date>2006-05-09T20:16:26+01:00</dc:date>
        <title>proposals:quoting</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:quoting&amp;amp;rev=1147205786</link>
        <description> If we&amp;rsquo;re adding meta objects to represent AST nodes, a useful extension (which makes writing the compiler tools vastly simpler) is to permit quoting literal AST nodes. For example, the ability to write quote(a+b), to denote the AST node you mi...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:reformed_with&amp;amp;rev=1216060726">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:38:46+01:00</dc:date>
        <title>proposals:reformed_with</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:reformed_with&amp;amp;rev=1216060726</link>
        <description> (Also see the discussion page for this proposal)  This is an attempt to restore lexical scope to the with statement, using type annotation syntax, with help from structural types and the syntax for type expressions. In addition to backward-compatibl...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:remove_the_arguments_object&amp;amp;rev=1182456393">
        <dc:format>text/html</dc:format>
        <dc:date>2007-06-21T20:06:33+01:00</dc:date>
        <title>proposals:remove_the_arguments_object</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:remove_the_arguments_object&amp;amp;rev=1182456393</link>
        <description> The arguments object described in section 10.1.8 of E262-3 should be relegated to an informative annex of deprecated features, and its essential functionality should be provided by other mechanisms: rest arguments, optional arguments, this function,...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:reserved_words&amp;amp;rev=1216060822">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:40:22+01:00</dc:date>
        <title>proposals:reserved_words</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:reserved_words&amp;amp;rev=1216060822</link>
        <description> (Also see the discussion page for this proposal)   Lists of reserved identifiers   Future reserved words are abolished. Identifiers are either completely reserved or contextually reserved. debugger and goto are made Contextually Reserved and enum, c...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:resurrected_eval&amp;amp;rev=1189540991">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-11T20:03:11+01:00</dc:date>
        <title>proposals:resurrected_eval</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:resurrected_eval&amp;amp;rev=1189540991</link>
        <description> (Also see the discussion page for this proposal.)  Resurrected eval   Motivation   The situation with eval is that 3rd Edition allows the implementation to prohibit it in genuinely useful and unproblematic situations. We want to fix that.   Proposal...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:security_wrappers&amp;amp;rev=1159308364">
        <dc:format>text/html</dc:format>
        <dc:date>2006-09-26T22:06:04+01:00</dc:date>
        <title>proposals:security_wrappers</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:security_wrappers&amp;amp;rev=1159308364</link>
        <description> DO NOT EXPORT  Questions for approval:  does this proposal go far enough?  is it too costly to execute for engines that want it?  is it too costly to implement for engines that don&amp;rsquo;t want it?  what are the alternative designs?  Security Wrappe...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:self_type&amp;amp;rev=1189196221">
        <dc:format>text/html</dc:format>
        <dc:date>2007-09-07T20:17:01+01:00</dc:date>
        <title>proposals:self_type</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:self_type&amp;amp;rev=1189196221</link>
        <description> This proposal suggests adding a &amp;ldquo;Self&amp;rdquo; type to EcmaScript. The key idea is that each structural object type implicitly binds the type variable &amp;ldquo;Self&amp;rdquo; to the exact type of the current object. The type &amp;ldquo;Self&amp;rdquo; can be...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:semantics&amp;amp;rev=1173795523">
        <dc:format>text/html</dc:format>
        <dc:date>2007-03-13T14:18:43+01:00</dc:date>
        <title>proposals:semantics</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:semantics&amp;amp;rev=1173795523</link>
        <description> (Also see the discussion page for this proposal)   Proposal   The semantics of the verification and evaluation phases will each be defined by a Standard ML program that takes an abstract syntax tree as input and may produce a value as output. The ve...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:slice_syntax&amp;amp;rev=1197335132">
        <dc:format>text/html</dc:format>
        <dc:date>2007-12-11T01:05:32+01:00</dc:date>
        <title>proposals:slice_syntax</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:slice_syntax&amp;amp;rev=1197335132</link>
        <description> See also the discussion page.  Slice syntax   For convenience (inspired by Python) and early-binding optimization opportunities, allow indexed access to string characters.   Character indexing   First, a special case left out of Edition 3: var s : S...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:stack_inspection&amp;amp;rev=1168978015">
        <dc:format>text/html</dc:format>
        <dc:date>2007-01-16T20:06:55+01:00</dc:date>
        <title>proposals:stack_inspection</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:stack_inspection&amp;amp;rev=1168978015</link>
        <description> (Also see the discussion page for this proposal.)  Motivation   Stack inspection is useful for e.g.:   lightweight implementations of debuggers  stack trace information for exceptions  security mechanisms based on access control lattices  aspect-ori...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:static_generics&amp;amp;rev=1169746610">
        <dc:format>text/html</dc:format>
        <dc:date>2007-01-25T17:36:50+01:00</dc:date>
        <title>proposals:static_generics</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:static_generics&amp;amp;rev=1169746610</link>
        <description> (Split from bug fixes &amp;ndash; start a discussion page or comment here.)  Static Generics   ES1-3 define many explicitly generic methods on Array.prototype and String.prototype, and ES3 defines two seemingly-generic methods on Function.prototype that...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:strict_and_standard_modes&amp;amp;rev=1216060273">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:31:13+01:00</dc:date>
        <title>proposals:strict_and_standard_modes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:strict_and_standard_modes&amp;amp;rev=1216060273</link>
        <description> (Also see the discussion page for this proposal)  Motivation   Strict and Standard compilation modes   Following ActionScript 3&amp;rsquo;s lead, we propose two &amp;ldquo;modes&amp;rdquo; for ECMAScript, one which is necessarily statically typed and one which ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:string.prototype.trim&amp;amp;rev=1161367491">
        <dc:format>text/html</dc:format>
        <dc:date>2006-10-20T18:04:51+01:00</dc:date>
        <title>proposals:string.prototype.trim</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:string.prototype.trim&amp;amp;rev=1161367491</link>
        <description> This built-in function returns a String with leading and trailing whitespace removed. Consider whitespace to be any of the following characters:   \u0009 : Horizontal tab  \u000A : Line feed or New line  \u000B : Vertical tab  \u000C : Formfeed  \u0...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:string_hashcodes&amp;amp;rev=1180428280">
        <dc:format>text/html</dc:format>
        <dc:date>2007-05-29T08:44:40+01:00</dc:date>
        <title>proposals:string_hashcodes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:string_hashcodes&amp;amp;rev=1180428280</link>
        <description> The String class is extended with a static method hashcode which takes a String and returns a uint:  public static function hashcode(s: String): uint;  If x and y are strings containing the same sequence of characters as observed through repeated ap...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:structural_types_and_typing_of_initializers&amp;amp;rev=1216060169">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:29:29+01:00</dc:date>
        <title>proposals:structural_types_and_typing_of_initializers</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:structural_types_and_typing_of_initializers&amp;amp;rev=1216060169</link>
        <description> We have nonrecursive structural types, introduced by the keyword type. There are function types, union types, Object types, and Array types.    type F = function (int,Object):int // a function type   type U = (A, B, C)         // a union type   type...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:switch_class&amp;amp;rev=1216060361">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:32:41+01:00</dc:date>
        <title>proposals:switch_class</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:switch_class&amp;amp;rev=1216060361</link>
        <description> (Also see the discussion page for this proposal)  (Formerly &amp;ldquo;switch interfaces&amp;rdquo;, which were formerly &amp;ldquo;enums&amp;rdquo;, which were formerly &amp;ldquo;switch classes&amp;rdquo;)  The language shall support structural types which are the transi...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:syntactic_semantics&amp;amp;rev=1162440667">
        <dc:format>text/html</dc:format>
        <dc:date>2006-11-02T04:11:07+01:00</dc:date>
        <title>proposals:syntactic_semantics</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:syntactic_semantics&amp;amp;rev=1162440667</link>
        <description> Generate &amp;laquo;WhileStatement : while ParenListExpression:e Substatement:s&amp;raquo;, labels =   Try  Loop L (result &amp;larr; nothing) {  Let v &amp;larr; &amp;laquo;Generate e, labels&amp;raquo;;  Let x &amp;larr; Read v;  Let b &amp;larr; Convert x, Boolean;  If Not b  T...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_function_types&amp;amp;rev=1145903144">
        <dc:format>text/html</dc:format>
        <dc:date>2006-04-24T18:25:44+01:00</dc:date>
        <title>proposals:syntax_for_function_types</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_function_types&amp;amp;rev=1145903144</link>
        <description> This proposal is superseded by syntax for type expressions.   Syntax for function types   I have created this node because we need function type syntax and we should have a place to discuss it. Please comment as appropriate. &amp;ndash;lars   Type expre...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_pragmas&amp;amp;rev=1216060801">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:40:01+01:00</dc:date>
        <title>proposals:syntax_for_pragmas</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_pragmas&amp;amp;rev=1216060801</link>
        <description> Pragmas are scoped and have effect in the entire syntactic unit in which they occur.  Implementations that do not recognize a pragma not defined in this standard must reject the program that uses that pragma. (Rationale: Unlike C or C++ the standard...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_type_expressions&amp;amp;rev=1216061117">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:45:17+01:00</dc:date>
        <title>proposals:syntax_for_type_expressions</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:syntax_for_type_expressions&amp;amp;rev=1216061117</link>
        <description> (Also see the discussion page for this proposal)  The following intends to clarify the syntax for TypeExpression, following introduction of parameterized types, structural types, a syntax for functions, and many other type things.  Observe that with...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:triple_quotes&amp;amp;rev=1216060885">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:41:25+01:00</dc:date>
        <title>proposals:triple_quotes</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:triple_quotes&amp;amp;rev=1216060885</link>
        <description> It is not uncommon for JavaScript programs to contain strings within strings. JavaScript currently provides support for up to two levels. This is sometimes inadequate.   Proposal   It is proposed that JavaScript&amp;rsquo;s string literal syntax be exte...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:type_definitions&amp;amp;rev=1216060462">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:34:22+01:00</dc:date>
        <title>proposals:type_definitions</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:type_definitions&amp;amp;rev=1216060462</link>
        <description> This node is here to have a place to pin down the form and meaning of the definition of a named structural type.   Syntax   Type names are introduced using the following syntax:   typedef ::= attr? &amp;quot;type&amp;quot; CL[ ident &amp;quot;=&amp;quot; typeexpr ]...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:type_inference&amp;amp;rev=1149275251">
        <dc:format>text/html</dc:format>
        <dc:date>2006-06-02T19:07:31+01:00</dc:date>
        <title>proposals:type_inference</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:type_inference&amp;amp;rev=1149275251</link>
        <description> With strict and standard modes, ES4 users can gain the benefits of static type checking. But the cost could be high: the system won&amp;rsquo;t necessarily catch most kinds of bugs, yet may lead to over-annotating (we have anecdotal evidence of this fro...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:type_parameters&amp;amp;rev=1216060112">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:28:32+01:00</dc:date>
        <title>proposals:type_parameters</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:type_parameters&amp;amp;rev=1216060112</link>
        <description> (Also see the discussion page for this proposal)  This proposal introduces basic named type parameters into type definitions, and extends type expressions with an argument position. In other words, a mechanism for constructing some families of gener...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:type_refinements&amp;amp;rev=1149231168">
        <dc:format>text/html</dc:format>
        <dc:date>2006-06-02T06:52:48+01:00</dc:date>
        <title>proposals:type_refinements</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:type_refinements&amp;amp;rev=1149231168</link>
        <description> DO NOT EXPORT  Motivation   Type refinements complement the type system by allowing programmers to specify detailed invariants that cannot be checked by the static type system. Although the type system allows programmers to check a fairly expressive...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:type_system&amp;amp;rev=1161370899">
        <dc:format>text/html</dc:format>
        <dc:date>2006-10-20T19:01:39+01:00</dc:date>
        <title>proposals:type_system</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:type_system&amp;amp;rev=1161370899</link>
        <description> Type system  The type checker is a separate evaluator of the AST  It is to be written in ML  Input AST will have all of its compile-time constant type references resolved to a type value    ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:typeof&amp;amp;rev=1216060776">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:39:36+01:00</dc:date>
        <title>proposals:typeof</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:typeof&amp;amp;rev=1216060776</link>
        <description> (Also see the discussion page for this proposal)  We are adding some new fundamental types in edition 4. What should the result of typeof be when a value of one of these new types is its operand?  Based on the need for backward compatibility, we hav...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:update_unicode&amp;amp;rev=1216059840">
        <dc:format>text/html</dc:format>
        <dc:date>2008-07-14T18:24:00+01:00</dc:date>
        <title>proposals:update_unicode</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:update_unicode&amp;amp;rev=1216059840</link>
        <description> (Also see the discussion page.)  Ticket #213 discusses the difference between external Unicode formats produced by certain data encoders (URI encoders; JSON) and consumed by ditto decoders, on the one hand; and ECMAScript string data, consumed by th...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:user_package_distribution&amp;amp;rev=1149275595">
        <dc:format>text/html</dc:format>
        <dc:date>2006-06-02T19:13:15+01:00</dc:date>
        <title>proposals:user_package_distribution</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:user_package_distribution&amp;amp;rev=1149275595</link>
        <description> We should consider creating a standard distribution mechanism for user-submitted packages. This would be one of the biggest practical improvements to the current state of affairs for EcmaScript programming. Once users can reliably share their code, ...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:vector&amp;amp;rev=1186000054">
        <dc:format>text/html</dc:format>
        <dc:date>2007-08-01T20:27:34+01:00</dc:date>
        <title>proposals:vector</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:vector&amp;amp;rev=1186000054</link>
        <description> Code that cares about performance will wish to have access to a reliable array type with different bells and whistles than Array. The Vector class is a dense typed 0-based one-dimensional array type with bounds checking and optional fixed length; im...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:versioning&amp;amp;rev=1206845170">
        <dc:format>text/html</dc:format>
        <dc:date>2008-03-30T02:46:10+01:00</dc:date>
        <title>proposals:versioning</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:versioning&amp;amp;rev=1206845170</link>
        <description> (See also the versioning discussion.)  Versioning   Media Type   ES4 shall define normative values for the version parameter described in RFC 4329 as optional for the application/javascript and application/ecmascript Internet media types. From RFC 4...</description>
    </item>
    <item rdf:about="http://wiki.ecmascript.org/doku.php?id=proposals:with-bound_variables&amp;amp;rev=1149049315">
        <dc:format>text/html</dc:format>
        <dc:date>2006-05-31T04:21:55+01:00</dc:date>
        <title>proposals:with-bound_variables</title>
        <link>http://wiki.ecmascript.org/doku.php?id=proposals:with-bound_variables&amp;amp;rev=1149049315</link>
        <description> Variables bound via the with construct are accessed with a dot prefix, e.g.: with &amp;#40;&amp;#123; x : 3 &amp;#125;&amp;#41; &amp;#123;   print&amp;#40;.x&amp;#41; &amp;#125; Rationale   Allowing with to add frames to the scope chain prevents the ability to know all bindings st...</description>
    </item>
</rdf:RDF>
