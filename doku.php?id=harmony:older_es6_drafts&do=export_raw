====== Early ES6 Working Drafts (Ecma-262 Edition 6) ======


====== Working Draft  Prior to Rev20======


===== September 27, 2013 Draft Rev 19=====
{{harmony:working_draft_ecma-262_edition_6_09-27-13.doc|doc}}
{{harmony:working_draft_ecma-262_edition_6_09-27-13-rev19markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_09-27-13.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_09-27-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "**Rev 19**".  Cumulative change markup is relative to Rev 17, August 23, 2013\\

\\
Changes include:
  * Better internal cross-linking
  * Restored NoIn expression productions
  * Added NoIn productions for Arrow functions
  * Made yield a reserved word
  * Included module BNF and some of the semantics (more to come)
  * Corrected TypedArray constructor 22.2.4.1
  * Changed branding for DataView to make them more polymorphic with Typed Arrays WRT buffer access and ArrayBuffer.isVGiew
  * Fixed Array.prototype.concat, filter,map, slice, splice result object construction.
  * Changed Array.prototype.concat, filter,map, slice, splice such so that when result object is an Array instance, it is from the same Realm as the method.
  * Clarified differences between %TypedArray% prototype methods and corresponding Array prototype
  * Renamed %%[[%%GetInheritance]] to %%[[%%GetPrototypeOf]] and %%[[%%SetInheritance]] to %%[[%%SetPrototypeOf]].
  * Changed Proxy %%[[G%%etPrototypeOf]] invariant so it only applies if target is not extensible.
  * Updated CreateOwnDataProperty to to eliminate the assert that the property doesn't exist.  Callers may need to check for success.
  * Fixed bug in creating result array for %TypedArray% filter
  * Added algorithms for Object.assign and Object.mixin
  * Added a IteratorStep abstract operation to simply most internal uses of iterators
  * Removed the recently added requirement that Typed Array instances must be non=extensible
  * renamed @@ToPrimitive as @@toPrimitive
  * Updated Object.prototype.toString for symbols, Math, and JSON
  * Added @@toStringTag methods for Math and JSON
  * Made Symbol a primitive type with a wrapper object named Symbol
  * Make new Object(Symbol()) throw a TypeError
  * Added properties of Symbol containing the well known symbols
  * Eliminated destructuring throw for non-existant source properties without a corresponding initializer
  * Renamed Math roundFloat32 -> Math.fround
  * Math.hypoth is now viadic
  * Normalized <CR><LF> and <CR> to <LF> in template strings.
  * Eliminated %%[[%%HasOwnProperty]] MOP operation
  * Must say new DataView(...) to create a new one 
  * Resolved bugs: 1940-1939, 1937-1930, 1928-1911, 1907-1904, 1899, 1896-1894, 1891, 1889, 1884-1881, 1878-1871, 1867, 1864, 1862-1860, 1857-1856, 1853, 1850-1816, 1812-1810, 1808-1806, 1803, 1606, 1598, 1589, 1153 


===== September 5, 2013 Draft Rev 18=====
{{harmony:working_draft_ecma-262_edition_6_09-5-13.doc|doc}}
{{harmony:working_draft_ecma-262_edition_6_09-5-13-.pdf|pdf with change markup only for this revision}} {{harmony:working_draft_ecma-262_edition_6_09-5-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "**Rev 18**"\\
This draft has essentially no new technical content relative to rev 17.  However, the document has been completely restructured and the rev17 content has redistributed roughly like this:

  * Sections 6-9 define the execution environment within which ECMAScript programs operate. 
  * Sections 10-16 define the actual ECMAScript programming language including its syntactic encoding and the execution semantics of all language features. In previous editions this was sections 6,7,11-14,16, and parts of 10.
  * Sections 17-26 define the ECMAScript standard library. It includes the definitions of all of the standard objects that are available for use by ECMAScript programs as the execute. In previous editions this was section 15.

A table mapping old section numbers to new sections numbers is also available: {{harmony:rev18_renumbering.pdf|pdf}} {{harmony:rev18_renumbering.xls|xls}}.

In the new organization all the property definitions for each object in sections 17-26 are now defined in alphabetical order. The built-ins are now groups into logical buckets rather than one giant chapter.  The naming of sections 17-26 isn't necessarily final nor is the specific groupings.  Feedback on this will be appreciated.

As part of reorganizing the specification all the internal change tracking was reset. The markup in rev18 reflects only the (non-organization) changes relative to rev17. Going forward I will track all new changes.  Rev17 is the last draft that will contain change history relative to the ES5.1 spec. so use that version if you want to see how something differs form the corresponding ES5.1 text.

Other changes include:
  * Add Number.MIN_SAFE_INTEGER property.




===== August 23, 2013 Draft Rev 17=====
**This is the last draft with change markup relative to the ES5.1 specification.**

{{harmony:working_draft_ecma-262_edition_6_08-23-13.doc|doc}} 
{{harmony:working_draft_ecma-262_edition_6_08-23-13-rev17markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_08-23-13.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_08-23-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "**Rev 17**"\\
**Note** there are know issues with bogus entities in bookmark views of the PDF files that include change markup.
\\
Changes include:
  * Added Number.isSafeInteger
  * Added Number.MAX_SAFE_INTEGER
  * Removed: Number.MAX_INTEGER
  * Removed: Number.toInteger
  * Define all parts of a class definition to be strict code
  * 'length' property of program defined functions have the attributes { %%[[%%Writable]]: false, %%[[%%Enumerable]]: false, %%[[%%Configurable]]: true }.
  * Computed property names in object literals and class definitions can be strings or symbols
  * TypedArray objects are made non-extensible when they are allocated.
  * Added ToLength abstract operation.  Generic Array methods use ToLength and are not limited to Uint32 lengths.
  * keys, and entries interators over Arrays and Typed Arrays return numbers for their key values.
  * Map/WeakMap constructor no longer explicitly looks for an 'entires' method on iterable arg.  Always uses @@iterator.Throws if an iteration item is not an object.
  * Added with blacklist (@@unscopable) support to withStatement and Object Environment Records
  * Added Array.prototype[@@unscopable) with value ["find", "findIndex", "fill", copyWithin", "entries", "keys", "values"]
  * Destructuring to a object/array pattern throws if the value/default value is not an object
  * Destructuring throws if a corresponding source property does not exist and a default value is not provided
  * Eliminated NoIn alternative expression grammar because they are unnecessary after eliminating for-in binding initializer expression 
  * Added Array.prototype.fill, Array.prototype.copyWithin, %TypedArray%.prototype.fill, %TypedArray%.prototype.copyWithin
  * Updated definition of Function.prototype.toString
  * Added Math.roundFloat32     (formerly aka Math.toFloat32)
  * Updated Array.prototype.splice to match web reality when called with 1 argument (see bug 429)
  * ["%%__proto__%%"]: obj defines a  data property named "%%__%%proto%%__%%" rather than setting the object's %%[[Prototype]]%% internal data property
  * Using a computed property name in a strict mode object literal or class definition to define a property that already exists is a runtime error
  * Made DataView buffer, byteLength, byteOffset prototype accessor properties just like they are for Typed Array
  * Specified all %TypedArray%.prototype methods 
  * Array.prototype.map, filter, slice, splice when used iwth array subclasses creates results arrays of the same subclass
  * foo.%%__proto__%% = 1234, etc. and {%%__proto__%%: 123} no longer throws.
  * Resolved Bugs: 1800, 1796, 1794, 178-1783, 1779, 1777-1771, 1769, 1767-1763, 1761-1752, 1750-1735, 1733, 1731, 1729, 1727-1717, 1715, 1713-1705, 1703-1661, 1659-1634, 1632-1626, 1624, 1622-1620, 1618, 1616-1609, 1607, 1605-1602, 1599, 1596, 1594, 1592, 1590, 1588-1586, 1583-1581, 1579, 1575, 1560, 1464, 1257, 788, 733, 716, 701, 429, 224, 175, 146 






===== July 15, 2013 Draft =====

July 15, 2013 Draft    {{harmony:working_draft_ecma-262_edition_6_07-15-13.doc|doc}}\\
{{harmony:working_draft_ecma-262_edition_6_07-15-13-rev16markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_07-15-13.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_07-15-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 16"\\
**Note** there are know issues with bogus entities in bookmark views of the PDF files.
\\
Changes include:
  * Restored MOP internal methods %%[[%%IsExtensible]]/%%[[%%PreventExtensions]] in place of %%[[%%HasIntegery]]/%%[[%%SetIntegrity]] 
  * Added %%[[%%Invoke]] internal method to the MOP. Revised evaluation semantics of function calls (including super calls) to use invoke)
  * Provided full complement of internal methods for Integer Index exotic objects (Typed Array views)
  * Reverted Symbols to being a kind of Exotic object rather than a new primitive type
  * Added computed symbol property definitions eg, [ ] to object literals and class definitions.
  * Made trailing ; optional for do-while statements
  * Simplified this binding semantics of Generator functions.
  * Updated Array.from algorithm to include mapping behavior
  * Generalize Array concat to deal with “spreading” array subclasses that may not be exotic arrays
  * Factor common TypedArray method into %TypedArray% abstract “class” as per plan of record.
  * Added of and from factory methods for Typed Arrays
  * Added applicable Array methods to %TypedArrayPrototype% (in some cases, thus stub sections)
  * Made Typed Arrays Iterables with @@iterator, keys, values, entries methods
  * Complete rewrite of DataView specification.
  * Map and WeakMap constructors try using entries methods before @@iterator method to initialize new instances
  * Added WeakSet
  * Added Reflect.invoke
  * Change from ES5: Object.freeze/seal/preventExensions. on primitives is a now a no-op. isFrozen/isSealed returns true. IsExtensible returns false.
  * Resolved Bugs: 1577, 1576, 1573, 1570, 1568-1566, 1564-1562, 1558, 1554, 1551-1549, 1546-1534, 1524, 1520-1476, 1434, 1417, 1405, 1400, 1398, 1396, 1391, 1375, 1365, 1354, 1317, 1315, 1295, 1290, 1283, 1276, 1269, 1265, 1213, 1201, 1196, 1194, 1175, 1146, 1085, 1057, 974, 965, 964, 962, 961, 955, 951, 936, 933, 930, 920, 903, 896, 892, 882, 793, 782, 781, 746, 743, 735, 734, 731-727, 715, 713, 711, 682, 677-675, 377, 313, 158 



===== May 14, 2013 Draft =====

{{harmony:working_draft_ecma-262_edition_6_05-14-13.doc|doc}} 
{{harmony:working_draft_ecma-262_edition_6_05-14-13rev15markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_05-14-13.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_05-14-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 15"\\
\\
Changes include:
  * Made Symbols a primitive type
  * Added semantics for generator function and generator method definitions
  * Added semantics for array comprehensions and generator comprehensions
  * Added semantics for yield and yield*
  * Replaced StopIteration exception with nextResult objects
  * Updated for-in/of semantics to use new generator protocol
  * Made Arrow function and concise method formal parameters "strict"
  * Added Object.setPrototypeOf function
  * Made Function constructor subclassable
  * Added Array.prototype.find and findIndex
  * Added Math.imul
  * Added ArrayBuffer.isView to check for ArrayBuffer view objects
  * Added Clause 15.19 defining the content of the build-in iteration module. Contains built-ins needed to support generators
  * Disallow Unicode escapes as RegularExpressionFlags
  * Moved Object.prototype.%%__%%proto%%__%% back to Annex B.  It's a simple access or that is not Realm specific.
  * Added in Annex B %%__%%proto%%__%% property keys in object literals
  * Added placeholder in Annex B for defining syntax of  html-like comments 
  * In Annex B, first cut at block-level function declaration legacy semantics 
  * Added RegExp.prototype.compile to Annexs B
  * Fixed handling of negative integer indices for typed arrays.  Elimiante ToPositiveInteger abstract operation
  * Typed Arrays are allowed to store values using native endianess.
  * Fixed various bugs in class declaration semantics
  * Dates never expose -0 as a time value
  * Resolved Bugs: 1469, 1461-1460, 1458, 1452-1451, 1449, 1446, 1442-1435, 1433, 1432-1414, 1411-1407, 1404, 1403-1401, 1399-1397, 1395-1392, 1389-1376, 1374-1366, 1363-1361, 1359, 1357-1355, 1352-1348, 1346, 1344-1342, 1340-1338, 1336-1318, 1316, 1314-1301, 1299-1296, 1294-1291, 1289-1288, 1286-1285, 1284, 1282, 1280-1277, 1272, 1253, 1117, 387



March 8, 2013 Draft    {{harmony:working_draft_ecma-262_edition_6_03-08-13.doc|doc}}\\
{{harmony:working_draft_ecma-262_edition_6_03-08-13-rev14markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_03-08-13.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_03-08-13-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 14"\\
\\
Changes include:
  * Class bodies are now always strict
  * **static** methods may now be defined in //ClassBody//
  * Updated comprehension syntax to use left-to-right order
  * Eliminated **is** and **isnt** operators
  * added grammar productions to allow unqualified super to be used after new operator
  * expression to the right of **of** in **for-of** now restricted to being //AssignmentExpression//
  * Almost all Chapter 15 constructors are now specified to have an @@create method and are initialized in a manner that supports subclassing. (still need to work on Function)
  * Added Object.getOwnPropertyKeys function
  * Added Object.is function
  * Tentatively added Object.mixin function
  * Array.from now takes an optional map function
  * Added String.prototype.normalize method
  * All String.prototype methods that accept RegExp arguments will now work with subclasses of RegExp
  * Renamed Number.prototype.toInt to Number.prototype.toInteger
  * RegExp global, ignoreCase, multiline, source, sticky are now prototype accessor properties rather than instance own data properties. This is needed to support adding web compatible compile method. 
  * Added new RegExp.prototype methods that allow string methods to work with RegExp subclasses: match, replace, search, split, @@isRegExp 
  * Map and Set constructors now accept a =n optional comparator parameter.  Only value currently allowed is "is"
  * ArrayBuffer and //Typed//Array object length no long restricted to 2<sup>32</sup> limit
  * Eliminated all remaining references to %%[[%%Class]] and %%[[%%NativeBrand]]  (except for in some DataView code that needs rewritting anyway)
  * Added SameValueZero abstraction operation that considers -0 and +0 to be the same value.
  * Rename %%[[%%GetP]] to %%[[%%Get]] and %%[[%%SetP]] to %%[[%%Set]]
  * Specified that unless otherwise indicated, internal data properties are created when an object is allocated.  Internal data properties are now explicitly listed in ObjectCreate abstract operation calls.
  * internally consolidated %%[[%%IsExtensible]]/%%[[%%IsSealed]/%%[[%%IsFrozen]] and %%[[%%PreventExtensions]]/%%[[%%Seal]]/%%[[%%Freeze]] into two MOP operations %%[[%%HasIntegrity]] and %%[[%%SetIntegrity]].  However, no public APIs (Proxy traps and Reflect functions) changed.
  * Numerous editorial and technical corrections, clarifications, and bug fixes
  * Resolved Bugs: 1252-1251, 1249-1246, 1243-1241, 1239-1238, 1236, 1234-1233, 1231-1229, 1227, 1225-1224, 1222-1220, 1218-1214, 1212-1209, 1207, 1206, 1205, 1203-1197, 1195-1194, 1190, 1188-1187, 1185, 1182-1176, 1174-1166, 1164-1163, 1157, 1144, 1123, 1110, 1108, 1089, 1081, 1063, 1060, 1051, 1045, 1019, 981, 979, 969, 497, 21, 20 



December 21, 2012 Draft   {{harmony:working_draft_ecma-262_edition_6_12-21-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_12-21-12-rev13markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_12-21-12.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_12-21-12-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 13"\\


This revision generalizing object allocation in order to make it easier to subclass built-ins and other objects with private instance state. TypedArrays are now better integrated into the spec. Cleaned up many typos and issues introduced with the major refactoring in Rev 12.

Changes include:
  * Well-known Symbols and Intrinsics added as 8.1.6.3
  * %%[[%%HasProperty]] reintroduced as an internal method
  * Elimianted %%[[%%Key]] and updated %%[[%%OwnPropertyKeys]] to return an iterator.  Object.keys and Object.getOwnProertyNames now uses %%[[%%OwnPropertyKeys]].
  * Restructured ordinary %%[[%%Construct]] to looks for and call a @@create method on the constructor.  This permits the separate definition of the allocation and initialization actions of constructors. This makes built-ins and other objects that require special allocation to be subclassable but corrects the problem of a single instance be initialized as an instance of multiple such classes.  See  [[https://mail.mozilla.org/pipermail/es-discuss/2012-November/026753.html]]
  * Added default @@create method for Function.prototype.  Restructued Date, Map, WeakMap, Set to use @@create based instance allocation.
  * Added Indexed Delegation Exotic objects to support array-like indexing of TypedArray objects.
  * Renamed "items" interator methods to "entires"
  * Complete reworked ArrayBuffer and TypedArray sections. They now use @@create pattern for allocation and are subclassable.  Still not integrated with Binary Data proposal but this is the foundation for doing so.
  * Resolved bugs:  1161, 1156, 1154, 1152, 1151, 1149-1147, 1145, 1143, 1141-1138, 1135, 1130, 1127, 1122, 1120-1118, 1112, 1107-1099, 1097-1090, 1088, 1086, 1084-1077, 1074-1064, 1062, 1061, 1058, 1056-1052, 1050-1024, 1022-982, 922 




November 22, 2012 Draft   {{harmony:working_draft_ecma-262_edition_6_11-22-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_11-22-12-rev12markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_11-22-12.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_11-22-12-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 12"\\
\\

This is a major revision that takes the first step at reforming the internal Meta-Object Protocol (the "internal methods") and extending it to support Proxies.  Quite a bit of material has moved within the document.  The overall document organization is in a state of flux and some sections will be moved in the future.  For now, somethings have been temporarily left in their old locations to preserve change markup relative to ES 5.1 that might otherwise get lost.

Changes include:
  * Reorganized Chapter 8 into separate language type and specification type sub sections 
  * Added Symbol property keys to the definition of the Object Type.  terminology migration from talking about "property names" to "property keys".
  * Restructured 8.6.2 (now 8.1.6.2) as the abstract interface definition of the internal object MOP.  eliminated Table 9 (Internal props of only some objects) and distribute related material to definitions of specific object forms. Moved discussion of internal method invariants plus invariant enforced by proxies into separate place order subsection. This needs a complete rewrite to clearly define the actual internal methods invariants.   
  * MOP changes: Added %%[[%%GetInheritance]]/%%[[%%SetInheritance]] as internal methods for accessing %%[[%%Prototype]] internal prototype chain.  Added [%%[[%%IsExtensible]]/%%[[%%PreventExtensions]]. Replaced %%[[%%Get]]/%%[[%%Put]] with %%[[%%GetP]]/%%[[%%SetP]].  At some point we may be able to rename these as %%[[%%Get]]/%%[[%%Set]].  Eliminated %%[[%%GetProperty]], %%[[%%CanPut]],  %%[[%%HasProperty]], %%[[%%DefaultValue]].  Added [[Keys]], %%[[%%OwnPropertyKeys]], %%[[%%Freeze]], %%[[%%Seal]], %%[[%%IsFrozen]], %%[[%%IsSealed]].
  * %%[[%%DefaultValue]] now part of ToPrimitive with a possible dispatch through a @@ToPrimitive symbol keyed method on objects.  Define a @@ToPrimitive method on Date.prototype to take care of  special date %%[[%%DefaultValue]] rules.
  * As part of "proto climbing" reform refactored GetValue and PutValue to directly incorporate the logic for property references on primitive values. Eliminated special %%[[%%Put]] and %%[[%%Get]] for primitive bases.
  * Eliminated all "strict" arguments to internal methods that were used to request trapping in strict mode".  All such methods now always return true/false success status. It's up to the called (usually via a convenience function) to throw on failure.
  * Section 8.3-8.5 now provided the concrete implementation of the MOP interface for all ordinary and exotic object forms defined in the specification. this will eventually move into a new top level section following the current section 10.
  * Defined Symbol objects as a kind of exotic object.  Its internal methods make it stateless and immutable.
  * In 9.3 added a number of convenience functions  that operate at the level of the generic object MOP.  These can be thought of as generic "derived" operations  that will work with any kind of object. They are now used throughout the specification.
  * Added Table 25 (incomplete) in 10.3 to define the "intrinsic objects" of a code realm
  * instanceof operator no longer uses an internal method.  Instead, extensible via a @@hasInstance symbol-keyed regular method.
  * Restated most Object.* reflection functions to delegate to corresponding MOP internal method.
  * Defined all of the functions in the @Reflect module corresponding to MOP internal operations.
  * Resolved bugs:   982, 979, 978, 973, 971-969, 966, 960, 958-956, 954-952, 950, 948-945, 943-936, 934-925, 923, 920-914, 912-904, 902-883, 881-873, 870-853, 851-839, 837-818, 808, 785, 672, 591, 400, 150, 100 




October 26, 2012 Draft   {{harmony:working_draft_ecma-262_edition_6_10-26-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_10-26-12-rev11markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_10-26-12.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_10-26-12-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 11"\\
\\
Changes include:
  * Changed the name of the //Program// grammar production to //Script//. Updated the syntax, static and runtime semantics of //Script// in 14.1
  * In 10.1, defined the terms "module code" and "generator code".
  * Specified semantics of global environment records and and global declaration instantiation semantics in line with the Sept. 2012 TC39 meeting decisions.
  * Specified WeakMap and Set
  * Added iterator  functions and iterator objects for Array
  * Added Map clear method
  * Made Map size an accessor property
  * Updated function declaration instantiation semantics to reflect Sept. 2012 TC39 discussion of function parameters.  However, there are likely to be more changes following the next meeting.
  * Some refactoring of early errors associated with places that use cover grammars.
  * Work on semantics of var/function declarations at top levels of functions and scripts.
  * Updated early error rules for formal function parameters based upon recent es-discuss thread.
  * Chapter 15 functions now get poison pills for "arguments" and "caller".
  * Changed Object.defineProperties to defer exceptions until all property updates are completed.
  * Stubbed in a place holder for Object.assign.
  * Made it explicit that Function.prototype does not have a prototype property.
  * Resolved bugs: 817-813, 812, 810, 805, 804-799, 796, 795, 792, 790-787, 784, 783, 780-777, 761-757, 755-751, 748, 747, 745-735, 733, 732, 726-716, 714, 712, 710, 706-700, 694, 690-683, 681-679, 674, 671-664, 658, 636, 627, 626, 614, 591, 570, 504, 496-494, 414, 401, 357, 312, 265, 260, 247, 214, 182, 153  

 








September 27, 2012 Draft   {{harmony:working_draft_ecma-262_edition_6_9-27-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_9-27-12-rev10markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_9-27-12.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_9-27-12-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 10"\\
\\
Changes include:
  * Significant reworking of the use of cover grammars for unambiguously defining assignment restructuring patterns and for arrow function formal parameters.
  * Renaming of Quasis to Template Strings
  * Incorporated Class definition semantic decisions from July TC39 meeting
  * Make concise methods enumerable, as per Sept. TC39 meeting.
  * A first cut at making Object.prototype.toString extensible via a Unique Symbol extension point.
  * Started to rough in binary data and typed arrays into Section 15. At this point it is mostly just material copied directly from wiki proposals. Lots of integration and detailed specification work remains.  
  * Fully specified Map builtin as 15.14.  This also serves as model for how other new built-in collections will be specified. 
  * Roughed in section 15 places holders for Set, Weakmap, Proxy, and the Reflect module.  Feedback on overall organization of this material is welcome.
  * Many fixes of both unreported and reported bugs, including:256, 464-468,470-479, 482-484,486,488,490-497,499,502,506,506-510,514, 515, 520, 521, 527, 529-537,539-559, 561-564, 566-569, 571, 572, 576, 579-587, 589, 592, 597-599, 601-609,612, 614-616, 618, 620-623, 626, 628-630, 633,635,639-644,650,653










July 8, 2012 Draft   {{harmony:working_draft_ecma-262_edition_6_7-8-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_7-8-12-rev9markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_7-8-12.pdf|pdf with cumulative change markup}} {{harmony:working_draft_ecma-262_edition_6_7-8-12-nomarkup.pdf|pdf without markup}}\\ 
Changes marked as "Rev 9"\\
\\
Changes include:
  * Quasi literal added to specification
  * Initial work at defining tail call semantics (still need to define tail positions in 13.7)
  * Initial pass at replacing native/host object terminology with ordinary/exotic objects
  * Clause 6 and others updated to clarify processing of full Unicode source code. Revised usage of "code unit" and "code point"
  * Specification of Identifiers updated to use current Unicode specification devices
  * \u{nnnnnn} Unicode code point escapes added
  * UTF-16 encoding for non-BMP characters in string literals now fully specified
  * Added functions: String.fromCodePoint, String.raw (a quasi tag function), String.prototype.codePointAt
  * ECMAScript now requires use of Unicode 5.1.0, normative references updated
  * A syntactic grammar notation was added for indicating when alternative lexical goals are required
  * Fixed ES5 missing explicitly setting length in several array functions
  * Fixed bugs: 368, 388-399, 402-405, 410-413, 415-416,418, 420-428, 430-439, 445-456,458-461


June 15, 2012 Draft  {{harmony:working_draft_ecma-262_edition_6_6-15-12.doc|doc}} \\
{{harmony:working_draft_ecma-262_edition_6_6-15-12-rev8markup.pdf|pdf with change markup only for this revision}}{{harmony:working_draft_ecma-262_edition_6_6-15-12.pdf|pdf with cumulative change markup}}{{harmony:working_draft_ecma-262_edition_6_6-15-12-nomarkup.pdf|pdf without markup}} \\ 
Changes marked as "Rev 8"\\
\\
Changes from May TC39 Review
  * Tentative addition of Class Definitions Syntax and Semantics in 13.5 based upon Maximally Minimal Strawman.  **//NOTE-Classes do not yet have full consensus within TC39 and may not survive.//**
  * 11.1.5 make super references illegal in method definitions within object literals
  * removed <| and TriangleLiterals
  * reverted methods to only have bracketed function bodies rather than concise bodies
  * Removed Object.isObject
  * Removed String.prototype.toArray
  * Eliminated requirement for buggy daylight savings time adjustment
Other changes
  * 5.1.1 , 5.2  Defined "chain production" and implicit algorithm pass through for chain productions.  Eliminated unnecessary pass through algorithms
  * Eliminate final remnants of ES1 line number references within algorithm conventions
  * Moved Literal from lexical to syntactic grammar
  * Updated keywords list
  * 10.1.2 /10.4 introduce concept of non-ECMAScript functions and execution contexts for them
  * 11.1.4.2 tweaks to Array Comprehension syntax
  * made it an early error to use a reserved word as a single identifier property definition shorthand
  * added default value initializers to internal elements and properties of destructuring assignment patterns
  * corrected major case statement semantic bug from ES5.1
  * made YieldExpressions illegal in parameter default value initializers
  * made home object binding of methods contingent upon them actually referencing super
  * added %%[[%%ThisMode]] internal property to functions via FunctionCreate to deal with lexical this binding in arrow functions
  * made super references and yield expressions early errors in ProgramBody
  * In Math.sign clarified handling of -0
  * Added String.prototype HTML wrapping functions to Annex B
  * Merged ES5.2 Annex F into Annex D&E
  * Made Annex F an Informative Summary of Static Semantic algorithms
  * Fixed bugs 281,340,343,346-349,351-356,358-367,369-376,378-380,382,384-386




May 4 , 2012 Draft  {{harmony:working_draft_ecma-262_edition_6_5-4-12.doc|doc}} {{harmony:working_draft_ecma-262_edition_6_5-4-12.pdf|pdf with change markup}}{{harmony:working_draft_ecma-262_edition_6_5-4-12-nomarkup.pdf|pdf without markup}} \\ 
Changes marked as "Rev 7"\\
Changes include:
  * Clarified that //IdentifierNames// can include escape sequences
  * Added syntax and semantics for Binary and Octal integers
  * Extended Reference to support super references
  * Added semantics for super in //MemberExpressions// and //CallExpressions//
  * Added abstract operations for Object and Array creations
  * Added arrow functions (13.2) and concise methods (13.3)
  * Preliminary introduction of code "Realms" (contexts with their own globals, intrinsics, etc.) (incomplete)
  * Added Method Environment Records as part of super support
  * Extensions to execution contexts needed to support generators, super, and code realms
  * Eliminated "enter execution context" algorithms by merging them with %%[[%%Call]], eval, //Program// etc.
  * General migration of most material related to functions and their execution into Chapter 13. 
  * Added additional explicit checks of completion values.
  * made yield illegal outside of generators
  * additional work/cleanup on for-in/for-of (prep for array comprehensions)
  * Started tracking Annex D and E additions
  * refactored "Creating Function Objects" into separate function and constructor creation abstract operations.
  * added Object.isObject
  * added Array.of and Array.from and cleanup Array constructor specification
  * added String.prototype repeat, startsWith, endsWith, contains, toArray
  * clarification of Number.MIN_Value for Arm processors (that don't support denormalized numbers)
  * added Number.EPSILON,MAX_INTEGER,parseInt, parseFloat,isNaN,isFinite, isInteger, toInt
  * added Number.prototype.clz
  * added Math.log10, log2, log1p, expm1, cosh, sinh, tanh, acosh, asinh, atanh, hypot, trunc, sign, cbrt








February 27, 2012 Draft  {{harmony:working_draft_ecma-262_edition_6_2-27-12.doc|doc}} {{harmony:working_draft_ecma-262_edition_6_2-27-12.pdf|pdf with change markup}}{{harmony:working_draft_ecma-262_edition_6_2-27-12-nomarkup.pdf|pdf without markup}} \\ 
Changes marked as "Rev 6"\\
This is an intermediate draft containing incomplete changes. \\
Changes include:
  * Eliminated "extended mode" in support of "one JavaScript" plan, all new features are generally available in all modes.
  * Eliminated various static semantic rules that would be breaking changes in "one JavaScript"
  * Added support for for-in, for-of, and first cut at lexically scoped for(;;). 
  * Added section B.3.1 with specifies %%__%%proto%%__%% feature.
  * Did spec. changes to implement "completion reform".
  * Did most of the work to pervasively use completion results for expressions as well as statements. Still some work to do in sections 10 and 15 but all of expressions and the Array methods have all been updated to handle completion records as general results.  See 8.8 for enhance completion record internal API. Note that observable occurrence points are more precisely specified for  many  exception that had been informally "thrown" by various specification algorithms.
  * Added %%[[%%Enumerate]] and %%[[%%Iterate]] internal methods for normal objects.
  * Generalized the List special type to also include a Record specification type.
  * Added an Invoke abstract operation that is used to internally "call methods" 
  * Added syntactic productions for array comprehensions, generators and Generator comprehensions.  No semantics yet.
  * Converted prose specification of labelled statements into algorithmic spec.  Added BreakableStatement production that includes IterationStatement and SwitchStatement.
  * Refactored let/const into a single set of productions and semantics rules.
  * Many minor edits and typo/bug corrections, see bugs.ecmascript.org for details.
  * Preliminary work in support of **super** references and **super** calls is still incomplete


January 16, 2012 Draft  {{harmony:working_draft_ecma-262_edition_6_1-16-12_.doc|doc}} {{harmony:working_draft_ecma-262_edition_6_1-16-12_.pdf|pdf with change markup}}{{harmony:working_draft_ecma-262_edition_6_1-16-12-nomarkup_.pdf|pdf without markup}} \\ 
Changes marked as "Rev 5"\\
This is an intermediate draft containing incomplete changes. \\
Changes include:
  * Various proses descriptions and introductions have been converted into non-normative notes. 
  * Some preliminary work was done in support of **super** references and **super** calls (incomplete)
  * Various editorial minor corrections
  * Updates to function declaration instantiation in support of extend mode formal parameter scoping decisions made at Nov 2011 TC39 meeting.
  * Changes to spread in destructing assignment in ArrayLiteral to conform to decisions made at Nov. 2011 TC39 meeting.
  * Added static and runtime semantics for concise method properties in object literals.
  * Converted ES5 algorithmic strict mode errors into declarative early errors for Unary and Postfix expressions
  * Added **is** and **isnt** operators
  * Eliminated "augments" as a possible formal parameter name for extended code


November 7, 2011 Draft  {{harmony:working_draft_ecma-262_edition_6_11-7-11.doc|doc}} {{harmony:working_draft_ecma-262_edition_6_11-7-11.pdf|pdf with change markup}}{{harmony:working_draft_ecma-262_edition_6_11-7-11-nomarkup.pdf|pdf without markup}} \\
Changes marked as "Rev 4"\\
Changes include:
   *  New issue bugs: 221,222
   *  Introduced the term "base code" to mean code that is neither strict or extended.
   *  Changed organization and presentation conventions for static and runtime semantics,  Note that some parts of the spec. have not yet been switched to the new conventions. 
   *  Refactors Literal production to make it easier to talk about non-null literals
   *  Added a %%[[%%Strict]] internal property for functions to make it easier to talk about strict mode code. Changed the definition of the %%[[%%Code]] and %%[[%%FormalParameters]] internal properties of function objects.
   *  Moved function parameter initialization into 10.4.3 "Entering Function Code"
   *  Added semantics for new function parameter forms in extended code.
   *  Refactored Declaration Binding Instantiations into separate subsections for different situations
   *  Added declaration instantiation for extended code functions.
   *  Refactored argument object creation into separate algorithms for strict and non-strict functions.
   *  Made //FunctionExpression// a //PrimaryExpression//
   *  Started grammar modifications to support #[ ] and #{ } as agreed to at Sept. TC39 meeting.  Incomplete
   *  Added grammar productions for concise methods in object literals.  Semantics still to come
   *  First cut at grammar productions for super property access and <| operator
   *  Started migrating some expository text into informative notes.
   *  Added static semantic algorithms for processing lexical scoped declarations
   *  Finished semantics for binding destructuring patterns in declarations, catch parameter, and function formal parameters
   * Made sure exceptions during processing of default parameter initializes are handled
   *  Major record for semantics of function declaration in section 13

September 23, 2011 Draft  {{harmony:working_draft_ecma-262_edition_6_9-23-11.doc|doc}}  {{harmony:working_draft_ecma-262_edition_6_9-23-11.pdf|pdf}}\\
Changes marked as "Rev 3"\\
Changes include:
   *  Resolved as fixed bugs 137, 140,167, 177, 183,184,185,186,187,188,189,190,191,193,196,196
   *  Merged multiple built-in "class" branding internal properties into a single %%[[%%NativeBrand]] internal property
   *  In 10.2, change environment records so that both mutable and immutable bindings may be in an initialized state and must be initialized before use via InitializeBinding
   *  In 10.5 added separate algorithm for Block declaration instantiation.  Block level declaration instantiations now specified.  Function and global level still need to be updated to support let and const
   *  Added a //Declaration// production to the grammar and changed //StatementList// to include both //Statement// and //Declaration//
   *  Added let and const declarations. var declarations still hoist to function level and must not conflict with a let or const.
   *  Hoisting and temporal dead zone for all block scoped declarations
   *  Added semantics for destructuring binding pattern.
   *  Added appropriate lexical scoping for declarations in bodies of switch and try statements.  Note that for statements still need work for declarations in for head.
   *  Added initializers for individual property level bindings in destructure bindings

July 25, 2011 Draft  {{harmony:working_draft_ecma-262_edition_6_7-25-11.doc|doc}}  {{harmony:working_draft_ecma-262_edition_6_7-25-11.pdf|pdf}} \\
Mostly typo corrections (thanks for all the reports) and corrections to problems that have been reported against ES5.1.  See closed 6th edition bugs at [[https://bugs.ecmascript.org/enter_bug.cgi?product=Draft%20for%206th%20Edition|bugs.ecmascript.org]].


July 12, 2011 Draft  {{harmony:working_draft_ecma-262_edition_6_7-12-11.doc|doc}}  {{harmony:working_draft_ecma-262_edition_6_7-12-11.pdf|pdf}}
This is the first working draft of the ES.next specification.  Notable changes from the ES5.1 spec include:
  * 5.1.4  Introduction of the concept of supplemental grammars.
  * 5.3 Introduction of concept of Static Semantic Rules
  * 8.6.2 and various places.  Eliminated %%[[%%Class]] internal property.  Added various internal trademark properties as a replacement.
  * 10.1.2 defined the concept of "extended code" that means code that may use new Es.next syntax.  Also redefined "strict code" to mean either ES5 strict mode code or extended code.
  * 11.1.4 added syntax and semantics for use of spread operator in array literals
  * 11.1.5 added syntax and semantics for property value shorthand and various semantic helper abstract operations. 
  * 11.2, 11.2.4 added syntax and semantics for spread operator in argument lists
  * 11.13 Add syntax and semantics for destructuring assignment operator. 
  * 12.2 Added BindingPattern syntax and partial semantics to support destructuring in declarations and formal parameter lists.
  * 13 Added syntax to support rest parameter, parameter default values,  and destructuring patterns in formal parameter lists.  Also static semantics for them.  However, instantiation of such parameters is not yet done. Defined the argument list "length" for such enhanced parameter lists.
  * 15 Clarified that clause 15 function specifications are in effect the definition of %%[[%%Call]] internal methods.
  * 15.2.4.2 Respecified toString to not use %%[[%%Class]]. Note that adding an explicit extension mechanism is still a to-do.
  * Annex B Retitled as normative optional features of Web Browser ES implementations



Initial Baseline document:  {{harmony:baseline_draft_standard_ecma-262_6th_edition.doc| doc}} \\
This is the starting point for the ES.next spec. It is just the ES5.1 specification with a ES6 draft cover and copyright notice.{{harmony:working_draft_ecma-262_edition_6_10-26-12.doc}}{{harmony:working_draft_ecma-262_edition_6_03-08-13-nomarkup.pdf}}{{harmony:working_draft_ecma-262_edition_6_04-05-14.doc}}