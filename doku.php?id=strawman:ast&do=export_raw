This page is a placeholder for a Harmony specification for a parser which parses ECMAScript text into a standard abstract syntax tree made up of ECMAScript objects. A proposal is taking shape at [[http://code.google.com/p/es-lab/wiki/JsonMLASTFormat]]. You can play with it at [[http://es-lab.googlecode.com/svn/trunk/site/esparser/index.html|ES5 Parser Playground]].

In order for this to be practical, most of the current ECMAScript utilities that currently take program text as a string would need to be extended to accept an AST as well. Otherwise, code processors that operate on ASTs would have to render the code back to text before actually using it -- which would be inconvenient and perhaps expensive.

----

I should hopefully be landing a patch soon that implements an [[https://developer.mozilla.org/en/SpiderMonkey/Parser_API|abstract syntax API]] for SpiderMonkey. You can follow [[https://bugzilla.mozilla.org/show_bug.cgi?id=533874|bug 533874]] in Bugzilla to see the progress. The initial version will only be available in the offline SpiderMonkey shell, so that we can test it adequately before deciding whether to release it to the web.

I designed the AST differently from the JsonMLAST format in order to be easier to write code that destructures the AST. The JsonMLAST is not particularly friendly to ''switch''-based code. It should be really easy to write conversions between the two formats.

I also plan to extend the parser library to take an optional [[http://en.wikipedia.org/wiki/Builder_pattern|builder]] argument that lets the client determine the output format. The basic structure of the underlying implementation is amenable to this, but it'll be a separate patch to implement.

 --- //[[dherman@ccs.neu.edu|Dave Herman]] 2010/06/24 21:12//

----

Primary reasons this has not been actively championed so far:

  * differences between internal AST representation of JS engines and the external representation of the library will lead to complex/branchy parsers at best and multiple parser at worst;
  * implementations' need to remain flexible to change their internal AST representation will also add incentive to implement multiple parsers;
  * the large API design space makes for a difficult standardization challenge;
  * multiple existing AST formats already exist, also making for a difficult standardization challenge;
  * this could all be implemented purely in JS as a library anyway

 --- //[[dherman@ccs.neu.edu|Dave Herman]] 2011/07/06 21:48//