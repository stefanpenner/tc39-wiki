(This is the discussion page for [[proposals:bytearray]])

===== Bits or Bytes =====

At [[meetings:minutes_jan_24_2007]], we discussed alternatives including larger element types than bytes, and Lars suggested going the other way: a mutable bit buffer type. Graydon cited Erlang's precedent. Bits are not addressable units, however, so perhaps byte is the right generic element type. For use-cases in demand (base64, zip, simple crypto and DSP code), byte is the right type because networks and filesystems want bytes.

Why Byte**Array**?  Because the [[proposals:static generics|Array generic methods]] work fine (albeit suboptimally) on ByteArrays.

===== Older Discussion =====

The ActionScript version of ByteArray implements two additional interfaces, IDataInput and IDataOutput, which allow for reading and writing multibyte types in stream fashion, with control over endianness where appropriate; thus the declaration of Adobe's ByteArray can be thought of as

<code>
class ByteArray implements IDataInput, IDataOutput;
</code>

Full documentation is [[http://livedocs.macromedia.com/flex/2/langref/flash/utils/ByteArray.html|here]], but a synopsis of these interfaces:

<code>
interface IDataInput
{
	//[read-only] Returns the number of bytes of data available for reading in the input buffer.
	public function get bytesAvailable() : uint

	//The byte order for the data, either the "bigEndian" or "littleEndian" constant from the Endian class.
 	public function get endian() : String
	public function set endian(s:String) : void

	// Used to determine whether the ActionScript 3.0, ActionScript 2.0, or ActionScript 1.0 format should be used when writing to, or reading binary Object data.
 	public function get objectEncoding() : uint
 	public function set objectEncoding(i:uint) : void
 	 	
	// Reads a Boolean value from the byte stream or byte array.
	public function readBoolean():Boolean
 	 	
	// Reads a signed byte from the byte stream or byte array.
	public function readByte():int
 	 	
	// Reads the number of data bytes, specified by the length parameter, from the byte stream or byte array.
	public function readBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void
 	 	
	// Reads an IEEE 754 double-precision floating point number from the byte stream or byte array.
	public function readDouble():Number
 	 	
	// Reads an IEEE 754 single-precision floating point number from the byte stream or byte array.
	public function readFloat():Number
 	 	
	// Reads a signed 32-bit integer from the byte stream or byte array.
	public function readInt():int
 	 	
	// Reads a multibyte string of specified length from the byte stream using the specified character set.
	public function readMultiByte(length:uint, charSet:String):String
 	 	
	// Reads an object from the byte stream or byte array, encoded in AMF serialized format.
	public function readObject():*
 	 	
	// Reads a signed 16-bit integer from the byte stream or byte array.
	public function readShort():int
 	 	
	// Reads an unsigned byte from the byte stream or byte array.
	public function readUnsignedByte():uint
 	 	
	// Reads an unsigned 32-bit integer from the byte stream or byte array.
	public function readUnsignedInt():uint
 	 	
	// Reads an unsigned 16-bit integer from the byte stream or byte array.
	public function readUnsignedShort():uint
 	 	
	// Reads a UTF-8 string from the byte stream or byte array.
	public function readUTF():String
 	 	
	// Reads a sequence of length UTF-8 bytes from the byte stream or byte array and returns a string.
	public function readUTFBytes(length:uint):String
}
</code>


<code>
interface IDataOutput
{
	//The byte order for the data, either the "bigEndian" or "littleEndian" constant from the Endian class.
 	public function get endian() : String
	public function set endian(s:String) : void

	// Used to determine whether the ActionScript 3.0, ActionScript 2.0, or ActionScript 1.0 format should be used when writing to, or reading binary Object data.
 	public function get objectEncoding() : uint
 	public function set objectEncoding(i:uint) : void
	
	// Writes a Boolean value.
	public function writeBoolean(value:Boolean):void
 	 	
	// Writes a byte.
	public function writeByte(value:int):void
 	 	
	// Writes a sequence of length bytes from the specified byte array, bytes, starting offset(zero-based index) bytes into the byte stream.
	public function writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void
 	 	
	// Writes an IEEE 754 double-precision (64-bit) floating point number.
	public function writeDouble(value:Number):void
 	 	
	// Writes an IEEE 754 single-precision (32-bit) floating point number.
	public function writeFloat(value:Number):void
 	 	
	// Writes a 32-bit signed integer.
	public function writeInt(value:int):void
 	 	
	// Writes a multibyte string to the byte stream using the specified character set.
	public function writeMultiByte(value:String, charSet:String):void
 	 	
	// Writes an object to the byte stream or byte array in AMF serialized format.
	public function writeObject(object:*):void
 	 	
	// Writes a 16-bit integer.
	public function writeShort(value:int):void
 	 	
	// Writes a 32-bit unsigned integer.
	public function writeUnsignedInt(value:uint):void
 	 	
	// Writes a UTF-8 string to the byte stream.
	public function writeUTF(value:String):void
 	 	
	// Writes a UTF-8 string.
	public function writeUTFBytes(value:String):void
}
</code>

Additionally, ActionScript's ByteArray provides two additional public methods that provide access to the zlib compression library:

<code>
	// Compresses the byte array using zlib compression. The entire byte array is compressed.
	public function compress():void

	// Decompresses the byte array. The byte array must have been previously compressed with the compress() method. 
	public function uncompress():void
</code>

This is definitely outside of the scope of what belongs in ES4, and probably beyond the scope of a "standard" library... it's not clear to me that attempting to define a standard binary format for object serialization is something we want to do at this point, nor is it likely that all implementations will want to require zlib to be present.


