====== The Kona Suggestion ======

At the Kona meeting, we discussed a set of minimal changes to ES3.1 strict that could produce a secure dialect that would not require a prior validation or transformation. If an agreeable secure dialect can be so obtained, then the expense of a design competition can be avoided.

These changes were suggested.

===== No Global Object =====

There is no common global object. Instead, each compilation unit is initialized with its own context, avoiding overt leakage with other contexts. Each compilation unit can be thought of as a function body.

===== Functions are immutable =====

Functions no longer operate as mutable objects. Functions will no longer have ''prototype'' members.  Objects will no longer inherit ''constructor'' members. There is no longer a need for the ''new'' operator. The ''Object.create'' function should be used instead.

This makes it possible to hand functions representing capabilities to untrusted code without requiring that each function be individually frozen. It also makes it possible to hand an object to untrusted code without also giving up the object's ''constructor'' and ''prototype''.

===== eval =====

The ''eval'' function operates in a new context. The code which is compiled and executed by ''eval'' does not get access to the caller's scope or the caller's global object. It instead gets a pristine new context, which can also be populated with members that are explicitly passed in through a //context// parameter.

The //source// parameter is evaluated as an expression. Its result is returned.

   ''eval(''//source//, //context//'')''

===== this =====

The ''this'' parameter is allowed only within function bodies. If it appears outside of a function body, it is a syntax error.

As in ES3.1 strict, calling a function as a function binds ''this'' to ''undefined'', not the global object.

===== Object =====

The ''Object.getPrototypeOf'' method is removed from the language. Its existence makes exchange of objects dangerous.

===== with =====

The ''with'' statement is a syntax error.

===== for in =====

The ''for'' ''in'' statement iterates over only the own properties of an object. Only keys that are strings are enumerated.

===== delete =====

The delete operator does not work on variables.

====== Open Questions ======

What support is required of the language or the DOM to allow the individual compilation units to selectively expose themselves to each other?

Should it be possible to augment the primordial prototypes or their offspring?


 --- //[[crock@yahoo-inc.com|Douglas Crockford]] 2008/12/01 18:42//

