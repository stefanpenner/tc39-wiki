====== Agenda ======

  * Recent wiki changes
  * Followups from past meetings
  * Plans for next meetings

====== Attendees ======

  * Jeff
  * Brendan
  * Graydon
  * Michael
  * Dave
  * Lars
  * Cormac
  * Doug

====== Discussion ======

  * From last week: Dave asks rationale for ''cast'' in addition to ''to''
    * downcast (''cast'')
    * user-defined conversion (''to'')
    * predefined conversions between unrelated types (''to'')
    * ''function(int):int'' => ''function(double):double'' is not a cast
      * it  be done using "the bit" ([[clarification:runtime_types_and_conversions]]'s "Solution 8")
      * implicit, or if explicit, via ''to'' operator?
    * ''cast'' goes from supertype to subtype (nominal or structural)
      * This is necessary under the hood
      * It's useful in the surface language in some cases, and less verbose than ''type switch''
      * Consensus is that we should expose ''cast'' separately from ''to''
    * ''*'' => ''int'' doesn't need ''cast'' or ''to''.
    * Dave to clean up spec

  * [[proposals:documentation]]/[[proposals:triple_quotes]] need work

  * Interfaces with generic methods and data
    * Graydon: MI means you have to go through vtbls for everything, data as well as methods
    * alternative is to be explicit and require get and set method pair instead of var
    * Jeff: lots of ways to implement, not clear which is best => defer.
    * Lars: complexity budget full, excepting syntactic sugar
    * Graydon: languages (Scala, Fortress) have constraints declared with interface on implementing classes
    * Consensus: defer, implementations may experiment
    * Dave: can we defer yet future-proof?  Seems like reserved by default nature of new syntax suffices

  * Implementations
    * Main thing to start to implement: type system in full.
    * Cormac and Dave to push [spec:type_system] forward.  Reviewable but not complete next week.
    * Implementors: Lars, Jeff, Dave, some Mozilla?
    * Decimal?  Graydon: libgcc has an implementation
    * Lars: need review of number spec -- Graydon will do it.

  * Another item from last week
    * Union type implicit conversion -- first type only rule simplistic?
