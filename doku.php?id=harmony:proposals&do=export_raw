===== Harmony =====

See [[harmony:harmony]] for requirements, goals, and means informing and guiding the proposals under development for ES-Harmony.

Lacking a formal language specification, the following list is not definitive, but it should reflect consensus achieved so far in TC39. Anything can be revisited for a good reason, of course.

The following list will grow, but not without bound before the next ECMA-262 Edition is constructed. Without prematurely triaging or using "ES6" (which might have to be used for a short-term edition, worst-case), for now let's focus on near-term proposals while keeping important longer-term [[strawman:strawman]] proposals warm.

 --- //[[brendan@mozilla.org|Brendan Eich]] 2009/07/29 23:51//

Most of the proposal on this page have already been incorporated into the ECMAScript 6 [[harmony:specification_drafts|specification drafts]].  In general, once a proposal is incorporated into the draft specification, the latest draft takes precedence over the proposal.  However, at any point in time, the integration of some proposal may still be incomplete and both proposal and the specification drafts may contain errors. If in doubt about the status of any proposal or the draft specification, post a question to es-discuss.  Remember, everything is subject to change up until the point that the final draft is approved by the Ecma General Assembly.

 --- //[[AllenWB@mozilla.com|Allen Wirfs-Brock]] 2013/01/19 19:56//

TC39 Process that applies for the features from ES7 forward is described here:[[https://docs.google.com/a/chromium.org/document/d/1QbEE0BsO4lvl7NFTn5WXWeiEIBfaVUF7Dk0hpPpPDzU|TC39 Process]]

 --- // [[dslomov@chromium.org|Dmitry Lomov]] 2014/01/30 11:47 //















===== Proposals =====

    * Function improvements
      * [[harmony:arrow function syntax]] (brendan)
      * [[harmony:function to string]] -- greater specification for [[https://mail.mozilla.org/pipermail/es5-discuss/2009-May/002532.html|problematic]] ''Function.prototype.toString'' (markm, allen)
      * [[harmony:function name property]]

  * Scoping, Binding, and Calling
    * [[harmony:Block scoped bindings]] (markm):
      * [[harmony:let]], the new ''var'' but block-scoped and with better use-before-set semantics (dherman,markm)
      * [[harmony:const]], for constant ''let''-like bindings (dherman,markm)
      * [[harmony:block functions]], ''let''-scoped functions declared directly in block statements (markm)
    * [[harmony:destructuring]] assignment and binding declaration forms, based on object and array initialiser syntax (allen)
      * [[harmony:refutable matching]] a non-sloppy semantics for matching
    * [[harmony:parameter default values]], supplying default arguments to trailing optional parameters (allen)
    * [[harmony:rest parameters]], for a trailing formal parameter capturing variable actual arguments as an array (allen)
    * [[harmony:spread]], the ''...'' prefix operator for expanding an array actual parameter into its elements (allen)
    * [[harmony:proper tail calls]] (dherman)

  * [[harmony:direct proxies]], enable generic object wrappers and virtual objects (tomvc, markm)
    * [[harmony:proto climbing refactoring]], refactoring proto-chain climbing in the spec to facilitate proxies (tomvc)
    * [[harmony:reflect api]], reflection API that complements proxies (tomvc)
    * [[harmony:virtual object api]], Proxy handler support for writing virtual objects (tomvc)
    * [[harmony:proxies spec]], placeholder spec language for ES.next direct proxies (tomvc)
    * [[harmony:extended object api]] standardizing some “missing” ES5 methods on ''Object''. (tomvc)
    * Superseded by the newer proposal:
      * <del>[[harmony:proxies]]</del>, a "catchall" mechanism for intercepting property accesses generically (tomvc)
      * <del>[[harmony:proxy defaultHandler]]</del>, a default Proxy forwarding handler. (tomvc, markm)
      * <del>[[harmony:proxies semantics]]</del>, explains the semantics in terms of the ES5 spec's internal operations (tomvc)
  * Collections
    * [[harmony:simple maps and sets]] (markm, dherman)
    * [[harmony:weak maps]] non-enumerable object-identity-based tables. Fixes a crucial memory leak in conventional weak-key tables. (markm)
    * [[harmony:egal]] (markm) an identity-testing operator inspired by Henry Baker's [[http://home.pipeline.com/~hbaker1/ObjectIdentity.html|egal]]. (Not itself a collection, but some collections will rely on it.)
  * Generation and Iteration
    * [[harmony:iterators]], for better collections, more usable ''for''-''in'' constructs, and proxy enumeration that scales (brendan, dherman)
    * [[harmony:generators]], Pythonic/Iconic generator functions that can yield multiple values while suspending their activation in between yields
    * [[harmony:generator expressions]], convenient, expressive syntax for creating lazily-computed generators (brendan, dherman)
    * [[harmony:array comprehensions]], convenient, expressive syntax for creating eagerly-computed arrays (brendan, dherman)
  * Modularity
    * [[harmony:multiple globals]], bringing the spec in line with the reality of multiple global objects (dherman)
    * [[harmony:modules]] (with [[harmony:modules examples|examples]]) and [[harmony:module loaders]] (dherman,samth)
    * [[harmony:modules_standard]], an organization of the standard library into modules (dherman)
    * [[harmony:object literals]] Object literal enhancements and setting the %%[[%%Prototype%%]]%% of literals (allenwb)
    * Classes: [[strawman::maximally minimal classes]] has been adopted replacing the May 2011 [[harmony:classes]] proposal
    * [[harmony:private name objects]], a runtime construct for creating encapsulated private properties (dherman)
    * [[harmony:quasis]], quasi-literals provide DSL support for content generation and introspection (mikesamuel)
  * [[harmony:typed objects]], efficient and structured access to contiguously allocated data (dherman) (post-ES6)
  * API improvements
    * ''Number'' improvements
      * [[Number.isFinite]]
      * [[Number.isNaN]]
      * [[Number.isInteger]]
      * [[Number.toInteger]]
    * Regular Expression improvements
      * [[harmony:regexp y flag]], the "sticky" flag causing a regexp to anchor at ''lastIndex''
      * [[harmony:regexp match web reality]]  Goes into a new normative but optional section that replaces Annex B (allenwb)
      * <del>[[Harmony:regexp look-behind support]]</del>
      * /u flag to support [[harmony:Unicode supplementary characters]]
    * String improvements
      * [[harmony:String.prototype.repeat]]
      * [[harmony:string extras]] (dherman)
      * case conversion fixes to support [[harmony:Unicode supplementary characters]]
      * [[strawman::Unicode Normalization]]
    * Math improvements
      * [[harmony:random-er]] (markm)
      * [[harmony:more math functions]]  (allenwb)
      * [[harmony:number EPSILON]] (crock)
      * [[harmony:number MAX_INTEGER]] (crock)

  * [[harmony:Unicode supplementary characters]], support for the full Unicode character set based on UTF-16 (norbert)

  * <del>[[harmony:pragmas]], a future-proof “use” directive for language modes and implementation options (dherman)</del>
  * Runtime-incompatible semantic bug fixes (there can be only a very short list; JSLint and better program analysis help wanted):
    * [[harmony:completion reform]], to make “completion position” a statically predictable attribute (dherman)
    * <del>[[harmony:typeof null]], a long-awaited bug fix to ''typeof'' (brendan crock)</del> Cancelled due to too much breakage.

  * [[harmony:observe]], Object.observe provides a way to observe changes to an objects properties. (post ES6)
