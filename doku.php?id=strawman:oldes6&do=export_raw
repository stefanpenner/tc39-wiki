====== ES6 Strawmen ======

This is the 'strawman' page from ES6. Most of this stuff didn't make it into ES6.












===== Proposals =====

  * Concurrency, Asynchrony, and Distributed Programming
    * [[strawman:concurrency]] (markm)
    * [[strawman:deferred functions]] allow writing asynchronous code in a linear style where you would otherwise use callbacks and manual CPS (peterhal)
    * [[strawman:async functions]]. Like [[strawman:deferred functions]] but expressed as a library in terms of [[strawman:concurrency]] and [[harmony:generators]].
  * Exemplars, Inheritance
    * [[strawman:magic proto property]] (markm)
    * [[strawman:fixing override mistake]] (markm)
   * Array
    * [[strawman:array create]] (crock)
      * also see [[proto operator|Set Literal Prototype Operator]]
    * [[strawman:array subtypes]], for allowing construction of array instances with prototype other than Array.prototype (olliej)
    * [[strawman:array statics]] (dherman)
    * [[strawman:Array.prototype.pushAll]] (dherman)
    * [[strawman:Array extras]] (dherman)
    * [[strawman:Array.prototype.has]] (arv)
    * [[strawman:Array fill and move|Array fill and copySlice]] (AllenWB)
  * Number and Math Enhancements
    * [[strawman:more Math fun]], see [[https://mail.mozilla.org/pipermail/es-discuss/2009-March/009036.html|Alistair Braidwood's message]]
    * [[https://spreadsheets.google.com/ccc?key=0Ak51JfLL8QLYdDBVcFZaMXhlY2d2RnM0TDVxLWlua3c&hl=en|Spreadsheet comparing ECMAScript Math functions to various C/C++ math libraries]]
    * [[strawman:number compare]] (crock)
    * [[strawman:random-er]], or a better (cryptographically strong) random number generator (see [[https://bugzilla.mozilla.org/show_bug.cgi?id=322529|Mozilla bug 322529]] and [[http://wiki.whatwg.org/wiki/Crypto|crypto.getRandomValues spec]] from Adam Barth)
    * [[strawman:simd number]] (johnmccutchan)
  * String
    * [[strawman:string format]] (crock)
    * [[strawman:string format take two|string format]] (shanjian)
  * Syntax
    * [[strawman:block vs object literal]]
    * [[strawman:object extension literals]] (AllenWB). It now includes concepts from dherman's [[strawman:batch assignment operator]]
  * Functions
    * [[strawman:name property of functions]] (brendan)
    * [[strawman:parameters property of functions]] (crock)
    * [[strawman:function to string]] -- greater specification for [[https://mail.mozilla.org/pipermail/es5-discuss/2009-May/002532.html|problematic]] ''Function.prototype.toString'' (markm, allen)
    * [[strawman:const functions]] (markm) now with a joining optimization
    * [[strawman:block lambda revival]], an alternative to [[arrow function syntax]] with new semantics, after Smalltalk and Ruby (brendan)
    * [[strawman:fix function name binding]] (Allen) Make the binding of function names consistent between //FunctionExpressions// and //FunctionDeclarations//
    * [[strawman:soft bind]] (alex, arv, markm) A binding operator intermediate between JavaScript's current loose binding and the tight binding of ''Function.prototype.bind''.
    * [[strawman:bind operator]], a concrete syntax for binding ''this'' and ''Function.prototype.call'' (dherman)
  * Regular Expressions
    * [[strawman:regexp x flag]] (crock)
    * [[strawman:multiline regexps]] (brendan, crock)
    * [[strawman:Steve Levithan RegExp API improvements]] 
  * Modules
    * [[strawman:simple module functions]] (markm)
    * [[strawman::system]], a place to put powerful objects provided by the embedding without having to introduce names into the global scope every time.
  * Operators
    * [[strawman:default operator]] (crock, brendan)
    * [[strawman:existential operator]] (brendan)
    * [[strawman:modulo operator]] (crock)
    * [[strawman:has operator]] (crock)
    * [[strawman:batch assignment operator]] (dherman).  See also [[strawman:object extension literals]] 
    * [[strawman:define properties operator]] (allen)
  * Value types
    * [[strawman:value types]], requirements for first-class number-like objects with operators and (we hope) literal syntax (brendan)
    * [[strawman:operator overloading with double dispatch]]  A straightforward way to specify and implement open-ended operator overloading (allenwb)
    *  also see [[value objects]] (dherman)
    * [[strawman:value proxies]], extending [[harmony:proxies]] to implement value types (cormac)
  * Garbage collection
    * [[strawman:gc semantics]] Thoughts on specifying the semantics of garbage collection. (markm)
    * [[strawman:weak references]] and post-mortem finalization. (markm)  see also: [[strawman:weak refs]] (dherman)
    * [[strawman:inherited explicit soft fields]] (markm) -- an encapsulation-respecting alternative to [[strawman:private names]] above. See comparison at [[strawman:names vs soft fields]].
  * Data structures
    * [[strawman:typed arrays]], similar to the above [[strawman:byte arrays]], as originally defined by [[http://www.webgl.org|webgl]] (arun)
    * [[strawman:encapsulated hashcodes]] (allen -- see also [[harmony:weak maps]])
    * [[strawman:records]] (brendan, dherman)
    * [[strawman:tuples]] (brendan, dherman)
    * [[strawman:dicts]] (dherman)
    * [[strawman:weak refs]] (dherman)  see also: [[strawman:weak references]] and post-mortem finalization. (markm)
  * Loops, iteration, enumeration
    * [[strawman:iterator conveniences]], an API for convenient construction of iterators (dherman)
    * [[strawman:enumeration]], more fully-specified semantics for property enumeration in ''for''-''in'' loops (brendan, dherman)
    * [[strawman:simultaneous iteration]], an extension to the ''for''-''of'' syntax for looping over multiple iterators simultaneously (dherman)
  * Private Names providing unique, unforgeable property names 
    * [[strawman:syntactic support for private names]] 
    * [[strawman:proxies_names|interaction between proxies and private names]]
      * Follow-up strawman to propose a [[strawman:proxy_symbol_decoupled|decoupling between proxies and private symbols]]
      * Another follow-up strawman: [[strawman:relationships]].
  * Proxies
    * [[strawman:revokable_proxies|revokable proxies]] to enable GC-friendly caretaker proxies.
  * Similar declarative object extension mechanisms
    * [[strawman:scoped object extensions]] (peterhal)
  * High Integrity Factories
    * [[strawman:traits semantics]] (tom)
    * [[strawman:guards]] A syntax for dynamic type-like checks (markm, waldemar)
    * [[strawman:trademarks]] Simple semantics for dynamic type-like checks (markm, waldemar)
  * Versions and Configuration
    * [[strawman:versioning]], the full versioning of script tag content and whole-frame/window object model monty (brendan)
  * [[strawman::ast]], a parser built into conforming Harmony implementations which returns a standard abstract syntax tree (dherman)
  * [[strawman::extended Object API]], standardizing some "missing" ES5 methods on Object. (tomvc)
    * [[strawman:object model reformation]]: Decoupling . and [ ] to enable used defined collections
  * [[strawman:paren free]], relaxing the rules about mandatory parentheses (brendan, dherman)
  * [[strawman:completion let]], a variation on ''let'' expressions that uses completions (dherman)
  * [[strawman:debugger expressions]], to extend the syntax of ''debugger'' to be an expression (dherman)
  * Conditionals
    * [[strawman:catch guards]], for conditionally catching exceptions (dherman)
    * [[strawman:pattern matching]], a conditional form based on destructuring (dherman)
    * [[strawman:cond expressions]], for concise linear nesting of conditional expressions (dherman)
  * [[strawman::observe]], better databinding via object change notifications
    * [[strawman::attach]], support databinding via proxies
  * Specification Techniques
    * [[strawman::Terminology]], Revised specification terminology for some ECMAScript concepts, eliminate "host" and "native" object terminology.
  * Internationalization support
    * [[strawman::Unicode support]], tools to aid in using Unicode.
    * [[strawman::Identifier identification]]

  * ECMASript object model and internal metaobject protocol (Allen)
    * [[strawman:subclassable-builtins]] How to make built-in constructors such as Array and Date "subclassable".
    * [[ES5 internal methods]] and aligning them with Proxy handlers
    * [[ES5 internal nominal typing]] and generalizing usage of %%[[Class]]%%
    * [[Class method syntax]]
  * [[minimal classes]] (dherman)
  * [[strawman::maximally minimal classes]] 
  * [[do expressions]] (dherman)
  * [[assert]] (dherman)
  * [[value objects]] (dherman)
  * [[data parallelism]] (dherman, brendan, rhudson, sherhut)
  * [[Error stack]] (arv)

===== Inactive proposals =====

See the [[strawman:accepted]] proposals page.

See the [[strawman:deferred]] proposals page.

See the [[strawman:withdrawn]] proposals page.