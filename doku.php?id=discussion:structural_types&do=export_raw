Conclusion:  ES4 will have //non-recursive// structural types; that is:

    type Person = {name:string, bestFriend:Person} // error


====== Structural types and the DOM connection ======

Graydon points out that forbidding recursive types seems to rule out obvious DOM-like tree types.  We could allow recursion with some restrictions.  Dave and Cormac should jump in here.

Graydon also pointed out eerie convergence with what we have developed here for Edition 4, over in Python-land: see [[http://www.python.org/~guido/static-typing/|Optional Static Typing]] for Python, and [[http://www.artima.com/weblogs/viewpost.jsp?thread=85551|Adding Optional Static Typing to Python]].  I couldn't find any uses of "structural types" or "structural typing", or references to the Modula 3 report.  It is good to see similar conclusions, in any event.

 --- //[[brendan@mozilla.org|Brendan Eich]] 2006/04/24 17:43//

Wouldn't DOM be typed using the class/interface system?  The Java bindings to DOM are in terms of interfaces, IIRC.  It would seem natural to adopt similar bindings for ECMAScript 4, instead of a prototype/structure based system.

 --- //[[lth@opera.com|Lars T Hansen]] 2006/04/26 03:40//

Sure, the DOM example was more to show the utility.  Recursive types are useful, and not peculiarly tied up with classes.  If classes can have members of recursive type, why not structural types?  [[discussion:classes as structural types with branding|Modeling classes and interfaces as branded structural types]] will require this. 

 --- //[[brendan@mozilla.org|Brendan Eich]] 2006/04/26 09:44//

Dave educated us about the cost (exponential in the original algorithm, quadratic in a much more complicated alternative algorithm) of recursive structural subtype checking.  So we are agreed that if you want recursive types, use nominal types.

 --- //[[brendan@mozilla.org|Brendan Eich]] 2006/06/30 14:26//



