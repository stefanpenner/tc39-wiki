''with'' must be deprecated.

Description: 
The ''with'' statement allow a “shorthand” form for writing recurring access to objects. Instead of writing:
<code>
a.b.val = true;
a.b.val2 = true;
</code>

one can write:

<code>
with (a.b) {
  val = true;
  val2 = true;
}
</code>

This looks concise but what happens in the following case:

<code>
function foo() {
  var val;

  with (a.b) {
    val = true;
  }
}
</code>

Is that a reference to the local ''val'' or to ''a.b.val''? Because of the potential of expando properties the compiler cannot tell. And just by looking at this piece of code, nor can the programmer tell. The compiler has to generate a by-name lookup of the entire scope chain - this is expensive.

Additionally, there is no safe way to add a property, say ''cost'', to ''a.b''; every user of the object who put it in a ''with block'' and who has a local or global variable called ''cost'' used in that ''with block'' is going to suddenly break.  Every time we add/remove a property, we risk changing the variable lookup semantics of an existing program. Similarly, every time we use a with block, we risk accidentally binding to the wrong thing when someone changes the object properties.

If we can’t read a program and be confident that we know what it is going to do, we can’t have confidence that it is going to work correctly.


Relevant Goal: [[es3.1:es3.1_goals|1, 5]]\\
Relevant Design Principle: [[es3.1:design_principles|2a, 2b]]\\
Relevant ES4 proposal: none

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2007/04/15 03:29//

Pratap writes that the compiler has to generate a by-name lookup of the entire scope chain.  That is not correct.  The compiler needs to generate by-name lookups in the with-bound object, but not elsewhere.  Consider this code:

<code language="javascript">
   function f(x) {
      with (o)
         return function (n) { return n+x }
   }
</code>

The lookup for 'n' can be by lexical index, as it shadows any ''with'' binding.  The lookup for ''x'' must probe ''o'' by name, but if the property is not found it can access the outer ''x'' by lexical index.

 --- //[[lth@acm.org|Lars T Hansen]] 2008/05/05 21:35//

Lars is correct (I meant in the with-bound object; my explanation was not clear).

It may be difficult to tighten spec language to fix 'with', but I still feel that if there is some way in which we can deprecate/ban 'with' we should consider it.

For e.g. 'with' interacts with other language features in surprising ways. Consider the following (contrived) case:

<code language="javascript">
var a = 1;
function foo() {
    var o = {a : 2};

    with (o) {
        var a = 3;
    }

    print (a);
    print(o.a);
}
foo();
print(a);
</code>

While it would look like the variable declaration from within ‘with’ should create a variable at foo scope and set its value to 3, that’s not what’s supposed to happen. Rules for variable instantiation (§10.1.3), variable declaration grammar (§12.2), identifier reference (§11.1.2), and scope chain and identifier resolution (§10.1.4) result in the above code being evaluated as if it were the following:

<code language="javascript">
var a = 1;
function foo() {
    var o = {a : 2};

    var a = undefined;

    with (o) {
        a = 3;
    }

    print(a);
    print(o.a);
}
foo();
print(a);
</code>

Notice that “var a = 3” ends up creating the variable in one scope and setting the value on an element in another scope. How can that be intentional?
It may be difficult to tighten spec language to fix this, but I do believe we should consider deprecating 'with' in an opt-in 'strict' mode (or 'subset' mode).

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2008/06/27 13:31//
