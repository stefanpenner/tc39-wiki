//Description//: It is not possible to determine the name of a function or the names of its arguments without parsing the function's source – this is a hole in the reflection functionality available through ES3. Functions should have a "name" property that returns the name of the function as a string. The "name" of anonymous functions can be the empty string.

Functions should also have an "arguments" array, containing the names of the arguments. So, for the example ''function foo(bar, baz) {…}'', ''foo.name'' is ''"foo"'' and ''foo.arguments'' is ''["bar", "baz"]''.

Relevant Goal: [[es3.1:es3.1_goals|1, 3]]\\
Relevant Design Principle: [[es3.1:design_principles|2a, 2b]]\\
Relevant ES4 proposal: none

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2007/04/15 03:01//
----
The one we are now calling "parameters" operates the same in strict and non-strict mode. It always returns an array of the declared parameter variable names, i.e., an array of strings - this had been misnamed "arguments" above. This (as well as "name" and isBoundedArity (name TBD) become own properties of each individual function object. 

The Function "arguments" property implemented by all current major browsers, but not specified by any standard. This is the one whose defacto behavior we’ll be codifying in annex B (along with Function.caller and arguments.callee), but specifying to throw on strict functions.

Function.caller behaves the same way - honoured in a non-strict module; will throw an exception in a strict module - these will be added to non-normative AnnexB in the spec.

Note that the "name" property shall return the empty string in the case of anonymous functions.

 --- //[[pratapl@microsoft.com|Pratap Lakshman]] 2008/05/15 12:59//
